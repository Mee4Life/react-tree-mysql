{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"F:\\\\React\\\\tree-mysql\\\\src\\\\pages\\\\Branch.js\",\n    _s = $RefreshSig$();\n\nimport { React, useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport BranchView from '../Components/branches/BranchView';\nimport { tokenGet } from '../utils/functions';\nimport Helmet from 'react-helmet';\n\nfunction Branch(props) {\n  _s();\n\n  const [data, setData] = useState(null);\n  const [isPending, setIsPending] = useState(true);\n  const [error, setError] = useState(null);\n  const {\n    isDark,\n    apiBase,\n    fontSize,\n    apiBase2,\n    token\n  } = props.p;\n  const {\n    id\n  } = useParams();\n  let url;\n\n  if (id) {\n    url = apiBase2 + '/branches/nested?id=' + id;\n  } else {\n    url = apiBase2 + '/branches/root';\n  }\n\n  const freshBranches = () => {\n    tokenGet(url, {\n      Authorization: token\n    }).then(data => {\n      setIsPending(false);\n      setData(data);\n      getBranchData(data);\n      setError(null);\n    }).catch(err => {\n      if (err.name === 'AbortError') {\n        console.log('fetch aborted');\n      } else {\n        // auto catches network / connection error\n        setIsPending(false);\n        setError(err.message);\n      }\n    });\n  };\n\n  useEffect(() => {\n    freshBranches();\n  }, [url]);\n  useEffect(() => {\n    if (data) {\n      const url = apiBase2 + '/branches/origin?id=' + data[0].parentID;\n      console.log('url', url);\n    }\n  }, []);\n  const ex = {\n    freshBranches\n  };\n\n  const getTitle = () => {\n    if (data && data.name) return data.name;else return 'Me 4 Life';\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [data && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: 'wrapper',\n      children: [/*#__PURE__*/_jsxDEV(Helmet, {\n        children: /*#__PURE__*/_jsxDEV(\"title\", {\n          children: getTitle()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(BranchView, {\n        isDark: isDark,\n        data: data,\n        isPending: isPending,\n        apiBase: apiBase,\n        setUpToDate: setData,\n        fontSize: fontSize,\n        p: props.p,\n        ex: ex\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 17\n    }, this), isPending && /*#__PURE__*/_jsxDEV(\"i\", {\n      className: \"fas fa-spinner spinner\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 27\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\" \", error, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 23\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Branch, \"MbvcGb0f8uYjsMlT6gBs2vdrRc4=\", false, function () {\n  return [useParams];\n});\n\n_c = Branch;\nexport default Branch;\n\nvar _c;\n\n$RefreshReg$(_c, \"Branch\");","map":{"version":3,"sources":["F:/React/tree-mysql/src/pages/Branch.js"],"names":["React","useState","useEffect","useParams","BranchView","tokenGet","Helmet","Branch","props","data","setData","isPending","setIsPending","error","setError","isDark","apiBase","fontSize","apiBase2","token","p","id","url","freshBranches","Authorization","then","getBranchData","catch","err","name","console","log","message","parentID","ex","getTitle"],"mappings":"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","sourcesContent":["import { React, useState, useEffect } from 'react'\nimport { useParams } from 'react-router-dom'\nimport BranchView from '../Components/branches/BranchView'\nimport { tokenGet } from '../utils/functions'\nimport Helmet from 'react-helmet'\n\nfunction Branch(props) {\n    const [data, setData] = useState(null);\n    const [isPending, setIsPending] = useState(true);\n    const [error, setError] = useState(null);\n    const { isDark, apiBase, fontSize, apiBase2, token } = props.p\n    const { id } = useParams()\n    let url;\n    if (id) {\n        url = apiBase2 + '/branches/nested?id=' + id\n    } else {\n        url = apiBase2 + '/branches/root'\n    }\n\n    const freshBranches = () => {\n        tokenGet(url, { Authorization: token })\n            .then(data => {\n                setIsPending(false);\n                setData(data);\n                getBranchData(data)\n                setError(null);\n            })\n            .catch(err => {\n                if (err.name === 'AbortError') {\n                    console.log('fetch aborted')\n                } else {\n                    // auto catches network / connection error\n                    setIsPending(false);\n                    setError(err.message);\n                }\n            })\n    }\n\n    useEffect(() => {\n\n        freshBranches()\n\n    }, [url])\n\n\n    useEffect(() => {\n        if (data) {\n            const url = apiBase2 + '/branches/origin?id=' + data[0].parentID\n            console.log('url', url)\n        }\n    }, [])\n\n    const ex = {\n        freshBranches\n    }\n\n    const getTitle = () => {\n        if (data && data.name) return data.name\n        else return 'Me 4 Life'\n    }\n\n    return (\n        <div>\n            {data &&\n                <div className={'wrapper'}>\n                    <Helmet>\n                        <title>{getTitle()}</title>\n                    </Helmet>\n                    <BranchView isDark={isDark} data={data} isPending={isPending} apiBase={apiBase} setUpToDate={setData} fontSize={fontSize} p={props.p} ex={ex} />\n                </div>\n\n            }\n            {isPending && <i className=\"fas fa-spinner spinner\"></i>}\n            {error && <div> {error} </div>}\n        </div>\n    )\n}\n\nexport default Branch\n"]},"metadata":{},"sourceType":"module"}