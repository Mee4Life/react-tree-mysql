{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"F:\\\\React\\\\tree-react-mysql\\\\src\\\\Components\\\\navbar\\\\login\\\\Login.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport './login.css';\nimport postData from '../../../utils/PostRequest';\nimport Register from '../register/Register';\n\nfunction Login(props) {\n  _s();\n\n  const p = props.p;\n  const userController = props.userController;\n  const [email, setEmail] = useState(null);\n  const [password, setPassword] = useState(null);\n  const [inProgress, setProgress] = useState(false);\n  const [error, setError] = useState(null);\n  const [isRegister, setIsRegister] = useState(false);\n  p.isRegister = isRegister;\n  p.setIsRegister = setIsRegister;\n\n  const submitLogin = () => {\n    // check login data > \n    if (!email || !password || email.length <= 0 || password.length <= 0) {\n      setErrorMsg('Email and Password can\\'t be empty. ');\n      return;\n    }\n\n    setProgress(true);\n    const url = p.apiBase + '/user/api/login';\n    const data = {\n      email,\n      password\n    };\n    postData(url, data).then(res => {\n      // store login information on success login\n      if (res.token) {\n        localStorage.setItem('token', res.token);\n        localStorage.setItem('userCard', JSON.stringify(res.userCard));\n        userController.setUserToken(res.token);\n        userController.setUserCard(res.userCard);\n      } // set progress to false\n\n\n      setProgress(false);\n      if (res.error) // send error msg\n        setErrorMsg(res.error);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: p.getCls('login-form-wrapper'),\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: p.getCls('login-form-container'),\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"email\",\n        name: \"email\",\n        id: \"email\",\n        onChange: e => setEmail(e.target.value),\n        className: p.getCls('login-input'),\n        placeholder: \"email\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"password\",\n        name: \"password\",\n        id: \"password\",\n        onChange: e => setPassword(e.target.value),\n        className: p.getCls('login-input'),\n        placeholder: \"password\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }, this), !inProgress && /*#__PURE__*/_jsxDEV(\"span\", {\n        className: p.getCls('login-submit'),\n        onClick: submitLogin,\n        children: \"Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 21\n      }, this), inProgress && /*#__PURE__*/_jsxDEV(\"i\", {\n        className: \"fas fa-spinner login-spinner\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: p.getCls('login-register'),\n        onClick: showRegisterForm,\n        children: \"Register\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-container\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 17\n    }, this), isRegister && /*#__PURE__*/_jsxDEV(Register, {\n      p: p,\n      userController: userController\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 9\n  }, this);\n\n  function setErrorMsg(err) {\n    setError(err);\n    setTimeout(() => {\n      setError(null);\n    }, 2000);\n  }\n\n  function showRegisterForm() {\n    setIsRegister(true);\n  }\n}\n\n_s(Login, \"4MUYI6QoBzTYkgXHZvBG/w2uvOs=\");\n\n_c = Login;\nexport default Login;\n\nvar _c;\n\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"sources":["F:/React/tree-react-mysql/src/Components/navbar/login/Login.js"],"names":["React","useState","postData","Register","Login","props","p","userController","email","setEmail","password","setPassword","inProgress","setProgress","error","setError","isRegister","setIsRegister","submitLogin","length","setErrorMsg","url","apiBase","data","then","res","token","localStorage","setItem","JSON","stringify","userCard","setUserToken","setUserCard","getCls","e","target","value","showRegisterForm","err","setTimeout"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport './login.css'\nimport postData from '../../../utils/PostRequest'\nimport Register from '../register/Register'\n\nfunction Login(props) {\n    const p = props.p\n    const userController = props.userController\n    const [email, setEmail] = useState(null)\n    const [password, setPassword] = useState(null)\n    const [inProgress, setProgress] = useState(false)\n    const [error, setError] = useState(null)\n    const [isRegister, setIsRegister] = useState(false)\n    p.isRegister = isRegister\n    p.setIsRegister = setIsRegister\n\n\n\n\n\n    const submitLogin = () => {\n        // check login data > \n        if (!email || !password || email.length <= 0 || password.length <= 0) {\n            setErrorMsg('Email and Password can\\'t be empty. ')\n            return\n        }\n        setProgress(true)\n        const url = p.apiBase + '/user/api/login'\n        const data = { email, password }\n        postData(url, data)\n            .then(res => {\n                // store login information on success login\n                if (res.token) {\n                    localStorage.setItem('token', res.token);\n                    localStorage.setItem('userCard', JSON.stringify(res.userCard));\n                    userController.setUserToken(res.token)\n                    userController.setUserCard(res.userCard)\n                }\n                // set progress to false\n                setProgress(false)\n                if (res.error)\n                    // send error msg\n                    setErrorMsg(res.error)\n            })\n    }\n\n\n\n    return (\n        <div className={p.getCls('login-form-wrapper')}>\n            <div className={p.getCls('login-form-container')}>\n                <input type=\"email\" name=\"email\" id=\"email\" onChange={(e) => setEmail(e.target.value)} className={p.getCls('login-input')} placeholder='email' />\n                <input type=\"password\" name=\"password\" id=\"password\" onChange={(e) => setPassword(e.target.value)} className={p.getCls('login-input')} placeholder=\"password\" />\n                {!inProgress &&\n                    <span className={p.getCls('login-submit')} onClick={submitLogin}>Login</span>\n                }\n                {inProgress &&\n                    <i className=\"fas fa-spinner login-spinner\"></i>\n                }\n                <span className={p.getCls('login-register')} onClick={showRegisterForm}>Register</span>\n            </div>\n            {error &&\n                <div className=\"error-container\">\n                    {error}\n                </div>\n            }\n            {isRegister &&\n                <Register p={p} userController={userController} />\n            }\n        </div>\n    )\n\n    function setErrorMsg(err) {\n        setError(err)\n        setTimeout(() => {\n            setError(null)\n        }, 2000)\n    }\n\n    function showRegisterForm() {\n        setIsRegister(true)\n    }\n}\n\nexport default Login\n"]},"metadata":{},"sourceType":"module"}