{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"F:\\\\React\\\\tree-mysql\\\\src\\\\Components\\\\rightSide\\\\search\\\\Search.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport './search.css';\nimport getReqHeader from '../../../utils/getReqHeader';\nimport BranchItem from '../branch/BranchItem';\n\nfunction BranchSearch(props) {\n  _s();\n\n  const {\n    p\n  } = props;\n  const [q, setQ] = useState('');\n  const [inProg, setProg] = useState(false);\n  const [response, setRes] = useState(null);\n\n  const handleCommandSearch = v => {\n    if (v.trim().length <= 0) {\n      // clean response. \n      setRes(null);\n      return;\n    } // set prog\n\n\n    setProg(true); // send request\n\n    const url = p.apiBase + '/branch?command=' + v;\n    console.log(url);\n    getReqHeader(url, {\n      token: p.token\n    }).then(d => {\n      // set response\n      setRes(null);\n      setRes(d); // end progress\n\n      setProg(false);\n    });\n  };\n\n  const handleSearch = e => {\n    const v = e.target.value; // check q\n\n    if (v.trim().length <= 0) {\n      // clean response. \n      setRes(null);\n      return;\n    } // check command search . \n\n\n    if (v[0] === '#') {\n      handleCommandSearch(v.replace('#', ''));\n      return;\n    } // set url from state on input text changed\n\n\n    let url = p.apiBase + '/branch/search?q=' + q;\n\n    if (e) {\n      // set state\n      setQ(e.target.value); // set url from the input text \n\n      url = p.apiBase + '/branch/search?q=' + e.target.value;\n    } // set prog\n\n\n    setProg(true); // send request\n\n    getReqHeader(url, {\n      token: p.token\n    }).then(d => {\n      // set response\n      setRes(null);\n      setRes(d); // end progress\n\n      setProg(false);\n    });\n  };\n\n  let latestCount = 1;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: p.getCls('search-branch-wrapper'),\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Search\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: p.getCls('search-branch-container'),\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        onChange: e => handleSearch(e),\n        className: p.getCls('search-branch-q-input')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: p.getCls('search-branch-q-search'),\n        onClick: handleSearch,\n        children: /*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"fas fa-search\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this), inProg && /*#__PURE__*/_jsxDEV(\"i\", {\n      className: \"fas fa-spinner spinner\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 17\n    }, this), response && response.map(branch => /*#__PURE__*/_jsxDEV(BranchItem, {\n      position: latestCount,\n      branch: branch,\n      p: p\n    }, latestCount++, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 17\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 9\n  }, this);\n}\n\n_s(BranchSearch, \"QtSXBYMIXF3bi7Q8mdHw3YIBqpA=\");\n\n_c = BranchSearch;\nexport default BranchSearch;\n\nvar _c;\n\n$RefreshReg$(_c, \"BranchSearch\");","map":{"version":3,"sources":["F:/React/tree-mysql/src/Components/rightSide/search/Search.js"],"names":["React","useState","getReqHeader","BranchItem","BranchSearch","props","p","q","setQ","inProg","setProg","response","setRes","handleCommandSearch","v","trim","length","url","apiBase","console","log","token","then","d","handleSearch","e","target","value","replace","latestCount","getCls","map","branch"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport './search.css'\nimport getReqHeader from '../../../utils/getReqHeader'\nimport BranchItem from '../branch/BranchItem'\n\nfunction BranchSearch(props) {\n    const { p } = props\n    const [q, setQ] = useState('')\n    const [inProg, setProg] = useState(false)\n    const [response, setRes] = useState(null)\n\n    const handleCommandSearch = (v) => { \n        if (v.trim().length <= 0) {\n            // clean response. \n            setRes(null)\n            return\n        }\n        // set prog\n        setProg(true)\n        // send request\n        const url = p.apiBase + '/branch?command=' + v\n        console.log(url);\n        getReqHeader(url, { token: p.token }).then((d) => {\n            // set response\n            setRes(null)\n            setRes(d)\n            // end progress\n            setProg(false)\n        })\n\n    }\n\n    const handleSearch = (e) => {\n        const v = e.target.value\n        // check q\n        if (v.trim().length <= 0) {\n            // clean response. \n            setRes(null)\n            return\n        }\n        // check command search . \n        if(v[0] === '#'){\n            handleCommandSearch(v.replace('#', ''))\n            return\n        }\n        // set url from state on input text changed\n        let url = p.apiBase + '/branch/search?q=' + q\n        if (e) {\n            // set state\n            setQ(e.target.value)\n            // set url from the input text \n            url = p.apiBase + '/branch/search?q=' + e.target.value\n        }\n        // set prog\n        setProg(true)\n        // send request\n        getReqHeader(url, { token: p.token }).then((d) => {\n            // set response\n            setRes(null)\n            setRes(d)\n            // end progress\n            setProg(false)\n        })\n    }\n\n    let latestCount = 1\n    return (\n        <div className={p.getCls('search-branch-wrapper')}>\n            <h3>Search</h3>\n            <div className={p.getCls('search-branch-container')} >\n                <input type=\"text\" onChange={(e) => handleSearch(e)} className={p.getCls('search-branch-q-input')} />\n                <span className={p.getCls('search-branch-q-search')} onClick={handleSearch} >\n                    <i className=\"fas fa-search\"></i>\n                </span>\n            </div>\n            {inProg &&\n                <i className=\"fas fa-spinner spinner\"></i>\n            }\n            {response && response.map(branch => (\n                <BranchItem key={latestCount++} position={latestCount} branch={branch} p={p} />\n            ))}\n\n        </div>\n    )\n}\n\nexport default BranchSearch\n"]},"metadata":{},"sourceType":"module"}