{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"F:\\\\React\\\\tree-mysql\\\\src\\\\Components\\\\branches\\\\new\\\\BranchLang.js\";\nimport { React, useState } from 'react';\n\nfunction BranchLang(props) {\n  const {\n    lang,\n    setLang,\n    branchType\n  } = props;\n\n  const getSelectableLang = () => {\n    return /*#__PURE__*/_jsxDEV(\"select\", {\n      className: \"select-branch-lang\",\n      name: \"lang\",\n      onChange: e => {\n        setLang(e.target.value);\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"ar\",\n        children: \"Arabic\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"en\",\n        children: \"English\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 13\n    }, this);\n  };\n\n  const isTextBranch = () => {\n    if (branchType === 'text') return true;\n    return false;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: isTextBranch && getSelectableLang()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 9\n  }, this);\n}\n\n_c = BranchLang;\nexport default BranchLang;\n\nvar _c;\n\n$RefreshReg$(_c, \"BranchLang\");","map":{"version":3,"sources":["F:/React/tree-mysql/src/Components/branches/new/BranchLang.js"],"names":["React","useState","BranchLang","props","lang","setLang","branchType","getSelectableLang","e","target","value","isTextBranch"],"mappings":";;AAAA,SAASA,KAAT,EAAgBC,QAAhB,QAAgC,OAAhC;;AAEA,SAASC,UAAT,CAAoBC,KAApB,EAA2B;AACvB,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,OAAR;AAAiBC,IAAAA;AAAjB,MAAgCH,KAAtC;;AAGA,QAAMI,iBAAiB,GAAG,MAAM;AAC5B,wBACI;AAAQ,MAAA,SAAS,EAAC,oBAAlB;AAAuC,MAAA,IAAI,EAAC,MAA5C;AAAmD,MAAA,QAAQ,EAAGC,CAAD,IAAO;AAChEH,QAAAA,OAAO,CAACG,CAAC,CAACC,MAAF,CAASC,KAAV,CAAP;AACH,OAFD;AAAA,8BAGI;AAAQ,QAAA,KAAK,EAAC,IAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHJ,eAII;AAAQ,QAAA,KAAK,EAAC,IAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAQH,GATD;;AAWA,QAAMC,YAAY,GAAG,MAAM;AACvB,QAAIL,UAAU,KAAK,MAAnB,EAA2B,OAAO,IAAP;AAC3B,WAAO,KAAP;AACH,GAHD;;AAKA,sBACI;AAAA,cACKK,YAAY,IAAIJ,iBAAiB;AADtC;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH;;KAzBQL,U;AA2BT,eAAeA,UAAf","sourcesContent":["import { React, useState } from 'react'\n\nfunction BranchLang(props) {\n    const { lang, setLang, branchType } = props\n\n\n    const getSelectableLang = () => {\n        return (\n            <select className=\"select-branch-lang\" name=\"lang\" onChange={(e) => {\n                setLang(e.target.value)\n            }}>\n                <option value=\"ar\">Arabic</option>\n                <option value=\"en\">English</option>\n            </select>\n        )\n    }\n\n    const isTextBranch = () => {\n        if (branchType === 'text') return true\n        return false\n    }\n\n    return (\n        <div>\n            {isTextBranch && getSelectableLang()}\n        </div>\n    )\n}\n\nexport default BranchLang\n"]},"metadata":{},"sourceType":"module"}