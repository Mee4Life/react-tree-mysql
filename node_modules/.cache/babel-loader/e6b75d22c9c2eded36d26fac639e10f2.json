{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"F:\\\\React\\\\tree-react-mysql\\\\src\\\\Components\\\\branchDtl\\\\BranchesList.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\n\nfunction BranchesList(props) {\n  _s();\n\n  // extract data from the store\n  // p, id, branches, branch\n  const data = props.data;\n  if (props.origin) data.branch = props.origin; // create state\n\n  const [loading, setLoading] = useState(true);\n  const [children, setChildren] = useState(null);\n  const [visible, setVisible] = useState(true);\n  const [branch, setBranch] = useState(props.branch); // functions \n\n  const getCls = base => {\n    return data.p.getCls('d1-' + base);\n  };\n\n  useEffect(() => {\n    setLoading(false);\n    setChildren(data.branches.filter(e => {\n      if (e.origin) {\n        return e.origin._id === branch._id;\n      }\n    }));\n  }, []);\n\n  const toggleList = () => {\n    if (visible) {} else {}\n\n    setVisible(!visible);\n  }; // create component header . \n\n\n  const getHeader = () => {\n    const element = /*#__PURE__*/_jsxDEV(\"div\", {\n      className: getCls('branch-header') + `children`,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: getCls('header'),\n        onClick: toggleList,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: getCls('name-line'),\n          children: \" \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 21\n        }, this), branch.name, /*#__PURE__*/_jsxDEV(\"div\", {\n          className: getCls('name-line'),\n          children: \" \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this);\n\n    return element;\n  }; // create children component. \n\n\n  const getCldList = () => {\n    if (!visible || !children) return;\n    const arr = [];\n    children.forEach(d => {\n      if (!d.children || d.children.length <= 0) {\n        const obj = /*#__PURE__*/_jsxDEV(\"div\", {\n          className: getCls('list-item'),\n          children: d.name\n        }, d._id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 21\n        }, this);\n\n        arr.push(obj);\n      } else {\n        arr.push( /*#__PURE__*/_jsxDEV(BranchesList, {\n          data: data,\n          branch: d\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 21\n        }, this));\n      }\n    });\n    return arr;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: getCls('child-wrapper'),\n    children: [getHeader(), getCldList()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 9\n  }, this);\n}\n\n_s(BranchesList, \"CtqOPxHqV7lHaiV8g5vi7508aL0=\");\n\n_c = BranchesList;\nexport default BranchesList;\n\nvar _c;\n\n$RefreshReg$(_c, \"BranchesList\");","map":{"version":3,"sources":["F:/React/tree-react-mysql/src/Components/branchDtl/BranchesList.js"],"names":["React","useEffect","useState","BranchesList","props","data","origin","branch","loading","setLoading","children","setChildren","visible","setVisible","setBranch","getCls","base","p","branches","filter","e","_id","toggleList","getHeader","element","name","getCldList","arr","forEach","d","length","obj","push"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\n\nfunction BranchesList(props) {\n    // extract data from the store\n    // p, id, branches, branch\n    const data = props.data\n    if (props.origin) data.branch = props.origin\n\n    // create state\n    const [loading, setLoading] = useState(true)\n    const [children, setChildren] = useState(null)\n    const [visible, setVisible] = useState(true)\n    const [branch, setBranch] = useState(props.branch)\n\n    // functions \n    const getCls = (base) => {\n        return data.p.getCls('d1-' + base)\n    }\n\n    useEffect(() => {\n        setLoading(false)\n        setChildren(data.branches.filter((e) => {\n            if (e.origin) {\n                return e.origin._id === branch._id\n            }\n        }))\n    }, [])\n\n    const toggleList = () => {\n        if(visible){\n            \n        }else{\n\n        }\n        setVisible(!visible)\n    }\n\n    // create component header . \n    const getHeader = () => {\n        const element =\n            <div className={getCls('branch-header') + `children`}>\n                <div className={getCls('header')} onClick={toggleList} >\n                    <div className={getCls('name-line')} > </div>\n                    {branch.name}\n                    <div className={getCls('name-line')} > </div>\n                </div>\n            </div>\n\n        return element\n    }\n\n\n    // create children component. \n    const getCldList = () => {\n        if (!visible || !children) return\n\n        const arr = []\n\n        children.forEach((d) => {\n            if (!d.children || d.children.length <= 0) {\n                const obj =\n                    <div className={getCls('list-item')} key={d._id}>\n                        {d.name}\n                    </div>\n                arr.push(obj)\n            } else {\n\n                arr.push(\n                    <BranchesList data={data} branch={d} />\n                )\n            }\n\n        })\n\n\n        return arr\n    }\n\n\n\n    return (\n        <div className={getCls('child-wrapper')}>\n            {getHeader()}\n            {getCldList()}\n        </div>\n    )\n\n\n}\n\nexport default BranchesList\n\n"]},"metadata":{},"sourceType":"module"}