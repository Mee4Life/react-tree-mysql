[{"F:\\React\\Tree\\src\\index.js":"1","F:\\React\\Tree\\src\\App.js":"2","F:\\React\\Tree\\src\\pages\\Branch.js":"3","F:\\React\\Tree\\src\\utils\\useWindowDimensions.js":"4","F:\\React\\Tree\\src\\utils\\getReqHeader.js":"5","F:\\React\\Tree\\src\\Components\\navbar\\Navbar.js":"6","F:\\React\\Tree\\src\\Components\\branches\\BranchView.js":"7","F:\\React\\Tree\\src\\Components\\navbar\\brand\\Brand.js":"8","F:\\React\\Tree\\src\\Components\\navbar\\links\\NavLinks.js":"9","F:\\React\\Tree\\src\\Components\\navbar\\login\\Login.js":"10","F:\\React\\Tree\\src\\Components\\branches\\list\\List.js":"11","F:\\React\\Tree\\src\\Components\\navbar\\links\\NavLink.js":"12","F:\\React\\Tree\\src\\Components\\rightSide\\RightPanel.js":"13","F:\\React\\Tree\\src\\utils\\PostRequest.js":"14","F:\\React\\Tree\\src\\Components\\navbar\\register\\Register.js":"15","F:\\React\\Tree\\src\\Components\\branches\\single\\Single.js":"16","F:\\React\\Tree\\src\\Components\\rightSide\\latest\\LatestBranches.js":"17","F:\\React\\Tree\\src\\Components\\rightSide\\search\\Search.js":"18","F:\\React\\Tree\\src\\Components\\rightSide\\branch\\BranchItem.js":"19","F:\\React\\Tree\\src\\Components\\branches\\new\\New.js":"20","F:\\React\\Tree\\src\\Components\\branches\\edit\\Edit.js":"21","F:\\React\\Tree\\src\\Components\\branches\\new\\BranchLang.js":"22","F:\\React\\Tree\\src\\pages\\TimeLine.js":"23","F:\\React\\Tree\\src\\Components\\timeline\\TimeLineHeader.js":"24","F:\\React\\Tree\\src\\Components\\timeline\\TimeLineBody.js":"25","F:\\React\\Tree\\src\\Components\\timeline\\parts\\Branch.js":"26","F:\\React\\Tree\\src\\pages\\BranchDtl.js":"27","F:\\React\\Tree\\src\\Components\\branchDtl\\BranchesList.js":"28","F:\\React\\Tree\\src\\utils\\functions.js":"29","F:\\React\\Tree\\src\\pages\\ByTime.js":"30","F:\\React\\Tree\\src\\Components\\byTime\\by-time-list.js":"31","F:\\React\\Tree\\src\\Components\\byTime\\by-time-item.js":"32","F:\\React\\Tree\\src\\Components\\branches\\FlashCard.js":"33","F:\\React\\Tree\\src\\Components\\branches\\Quizlet.js":"34","F:\\React\\Tree\\src\\Components\\branches\\new\\groups\\Group.js":"35","F:\\React\\Tree\\src\\Components\\branches\\new\\persons\\Person.js":"36","F:\\React\\Tree\\src\\Components\\branches\\new\\tags\\Tag.js":"37","F:\\React\\Tree\\src\\Components\\branches\\new\\groups\\List.js":"38","F:\\React\\Tree\\src\\Components\\branches\\new\\groups\\Input.js":"39","F:\\React\\Tree\\src\\Components\\branches\\new\\persons\\List.js":"40","F:\\React\\Tree\\src\\Components\\branches\\new\\persons\\Input.js":"41","F:\\React\\Tree\\src\\Components\\branches\\new\\tags\\List.js":"42","F:\\React\\Tree\\src\\Components\\branches\\new\\tags\\Input.js":"43","F:\\React\\Tree\\src\\Components\\branches\\new\\groups\\Item.js":"44","F:\\React\\Tree\\src\\Components\\branches\\new\\persons\\Item.js":"45","F:\\React\\Tree\\src\\Components\\branches\\new\\tags\\Item.js":"46","F:\\React\\Tree\\src\\Components\\Inputs\\input1.js":"47","F:\\React\\Tree\\src\\pages\\groups\\GroupItem.js":"48","F:\\React\\Tree\\src\\pages\\groups\\Form.js":"49","F:\\React\\Tree\\src\\Components\\buttons\\Btn1.js":"50","F:\\React\\Tree\\src\\pages\\tags\\Form.js":"51","F:\\React\\Tree\\src\\pages\\tags\\GroupItem.js":"52","F:\\React\\Tree\\src\\pages\\people\\GroupItem.js":"53","F:\\React\\Tree\\src\\pages\\people\\Form.js":"54","F:\\React\\Tree\\src\\pages\\groups\\GroupsManager.js":"55","F:\\React\\Tree\\src\\pages\\people\\PeopleManager.js":"56","F:\\React\\Tree\\src\\pages\\tags\\TagsManager.js":"57","F:\\React\\Tree\\src\\pages\\html\\HTMLV.js":"58","F:\\React\\Tree\\src\\pages\\people\\person-view\\PersonView.js":"59","F:\\React\\Tree\\src\\pages\\groups\\single\\GroupView.js":"60","F:\\React\\Tree\\src\\pages\\tags\\view\\TagView.js":"61","F:\\React\\Tree\\src\\Components\\footer\\Footer.js":"62"},{"size":219,"mtime":1612339053389,"results":"63","hashOfConfig":"64"},{"size":6521,"mtime":1617030597760,"results":"65","hashOfConfig":"64"},{"size":1947,"mtime":1615827083948,"results":"66","hashOfConfig":"64"},{"size":606,"mtime":1612347692166,"results":"67","hashOfConfig":"64"},{"size":761,"mtime":1614269301258,"results":"68","hashOfConfig":"64"},{"size":6345,"mtime":1617030322315,"results":"69","hashOfConfig":"64"},{"size":7539,"mtime":1616852390886,"results":"70","hashOfConfig":"64"},{"size":209,"mtime":1612349953778,"results":"71","hashOfConfig":"64"},{"size":722,"mtime":1615298422441,"results":"72","hashOfConfig":"64"},{"size":3006,"mtime":1612385730789,"results":"73","hashOfConfig":"64"},{"size":1660,"mtime":1616623470782,"results":"74","hashOfConfig":"64"},{"size":243,"mtime":1614921228956,"results":"75","hashOfConfig":"64"},{"size":1686,"mtime":1615194740948,"results":"76","hashOfConfig":"64"},{"size":989,"mtime":1612363646218,"results":"77","hashOfConfig":"64"},{"size":3657,"mtime":1612381630857,"results":"78","hashOfConfig":"64"},{"size":23134,"mtime":1617031746113,"results":"79","hashOfConfig":"64"},{"size":1686,"mtime":1616133150751,"results":"80","hashOfConfig":"64"},{"size":2618,"mtime":1616762557946,"results":"81","hashOfConfig":"64"},{"size":644,"mtime":1612478147368,"results":"82","hashOfConfig":"64"},{"size":9457,"mtime":1616623451051,"results":"83","hashOfConfig":"64"},{"size":5675,"mtime":1613802008792,"results":"84","hashOfConfig":"64"},{"size":691,"mtime":1614858461046,"results":"85","hashOfConfig":"64"},{"size":1913,"mtime":1613802008798,"results":"86","hashOfConfig":"64"},{"size":2003,"mtime":1613802008796,"results":"87","hashOfConfig":"64"},{"size":615,"mtime":1613802008796,"results":"88","hashOfConfig":"64"},{"size":1229,"mtime":1613802008797,"results":"89","hashOfConfig":"64"},{"size":1634,"mtime":1613860500657,"results":"90","hashOfConfig":"64"},{"size":2126,"mtime":1615825786301,"results":"91","hashOfConfig":"64"},{"size":7393,"mtime":1616605262209,"results":"92","hashOfConfig":"64"},{"size":2853,"mtime":1614331530351,"results":"93","hashOfConfig":"64"},{"size":571,"mtime":1614331530344,"results":"94","hashOfConfig":"64"},{"size":5620,"mtime":1614923055354,"results":"95","hashOfConfig":"64"},{"size":1919,"mtime":1614362948707,"results":"96","hashOfConfig":"64"},{"size":1530,"mtime":1614362948708,"results":"97","hashOfConfig":"64"},{"size":1064,"mtime":1615531689875,"results":"98","hashOfConfig":"64"},{"size":1122,"mtime":1614923055327,"results":"99","hashOfConfig":"64"},{"size":996,"mtime":1614923055330,"results":"100","hashOfConfig":"64"},{"size":1217,"mtime":1615183874811,"results":"101","hashOfConfig":"64"},{"size":1821,"mtime":1615186327016,"results":"102","hashOfConfig":"64"},{"size":1245,"mtime":1615183874886,"results":"103","hashOfConfig":"64"},{"size":1791,"mtime":1615183874884,"results":"104","hashOfConfig":"64"},{"size":1222,"mtime":1615187448608,"results":"105","hashOfConfig":"64"},{"size":1720,"mtime":1615187448607,"results":"106","hashOfConfig":"64"},{"size":1286,"mtime":1615185904391,"results":"107","hashOfConfig":"64"},{"size":1385,"mtime":1615187448607,"results":"108","hashOfConfig":"64"},{"size":1262,"mtime":1615185918545,"results":"109","hashOfConfig":"64"},{"size":322,"mtime":1615297868800,"results":"110","hashOfConfig":"64"},{"size":3928,"mtime":1615455890438,"results":"111","hashOfConfig":"64"},{"size":2715,"mtime":1616616247679,"results":"112","hashOfConfig":"64"},{"size":352,"mtime":1615297868802,"results":"113","hashOfConfig":"64"},{"size":2697,"mtime":1616620695193,"results":"114","hashOfConfig":"64"},{"size":3933,"mtime":1615455890460,"results":"115","hashOfConfig":"64"},{"size":3974,"mtime":1615455890449,"results":"116","hashOfConfig":"64"},{"size":2596,"mtime":1616598560797,"results":"117","hashOfConfig":"64"},{"size":1793,"mtime":1616616058214,"results":"118","hashOfConfig":"64"},{"size":1816,"mtime":1616602591121,"results":"119","hashOfConfig":"64"},{"size":1895,"mtime":1616620584953,"results":"120","hashOfConfig":"64"},{"size":2777,"mtime":1615455890440,"results":"121","hashOfConfig":"64"},{"size":2018,"mtime":1616602591148,"results":"122","hashOfConfig":"64"},{"size":2080,"mtime":1616615415827,"results":"123","hashOfConfig":"64"},{"size":2053,"mtime":1616620042138,"results":"124","hashOfConfig":"64"},{"size":578,"mtime":1616664167126,"results":"125","hashOfConfig":"64"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},"pl5pg5",{"filePath":"129","messages":"130","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"131","messages":"132","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"128"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"128"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"128"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"128"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"163","messages":"164","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165","usedDeprecatedRules":"128"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170","usedDeprecatedRules":"128"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"175","usedDeprecatedRules":"128"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"178","usedDeprecatedRules":"128"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"181","usedDeprecatedRules":"128"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"184","usedDeprecatedRules":"128"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"187","usedDeprecatedRules":"128"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"192","usedDeprecatedRules":"128"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"195","usedDeprecatedRules":"128"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"198","usedDeprecatedRules":"128"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"201","usedDeprecatedRules":"128"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"206","usedDeprecatedRules":"128"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"209","usedDeprecatedRules":"128"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"212","usedDeprecatedRules":"128"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"215","usedDeprecatedRules":"128"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"218","usedDeprecatedRules":"128"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"221","usedDeprecatedRules":"128"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"224","usedDeprecatedRules":"128"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"227","usedDeprecatedRules":"128"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"230","usedDeprecatedRules":"128"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"233","usedDeprecatedRules":"128"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"236","usedDeprecatedRules":"128"},{"filePath":"237","messages":"238","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"239","usedDeprecatedRules":"128"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"242","usedDeprecatedRules":"128"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"245","usedDeprecatedRules":"128"},{"filePath":"246","messages":"247","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"248","usedDeprecatedRules":"128"},{"filePath":"249","messages":"250","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"251","messages":"252","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"253","messages":"254","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"255","messages":"256","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"257","usedDeprecatedRules":"128"},{"filePath":"258","messages":"259","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"260","messages":"261","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"262","messages":"263","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"264","messages":"265","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"266","messages":"267","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"268","usedDeprecatedRules":"128"},{"filePath":"269","messages":"270","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"271","usedDeprecatedRules":"128"},{"filePath":"272","messages":"273","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"274","usedDeprecatedRules":"128"},{"filePath":"275","messages":"276","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"277","usedDeprecatedRules":"128"},{"filePath":"278","messages":"279","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"280","usedDeprecatedRules":"128"},{"filePath":"281","messages":"282","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"283","usedDeprecatedRules":"128"},{"filePath":"284","messages":"285","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"286","usedDeprecatedRules":"128"},{"filePath":"287","messages":"288","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},"F:\\React\\Tree\\src\\index.js",[],["289","290"],"F:\\React\\Tree\\src\\App.js",["291","292","293","294","295","296","297","298"],"F:\\React\\Tree\\src\\pages\\Branch.js",["299"],"import { React, useState, useEffect } from 'react'\nimport { useParams } from 'react-router-dom'\nimport BranchView from '../Components/branches/BranchView'\nimport { tokenGet } from '../utils/functions'\nimport Helmet from 'react-helmet'\n\nfunction Branch(props) {\n    const [data, setData] = useState(null);\n    const [isPending, setIsPending] = useState(true);\n    const [error, setError] = useState(null);\n    const { isDark, apiBase, fontSize } = props.p\n    const { id } = useParams()\n    let url;\n    if (id) {\n        url = apiBase + '/branch?id=' + id\n    } else {\n        url = apiBase + '/branch?origin=null'\n    }\n\n    const freshBranches = () => {\n        tokenGet(url)\n            .then(data => {\n                setIsPending(false);\n                setData(data);\n                setError(null);\n            })\n            .catch(err => {\n                if (err.name === 'AbortError') {\n                    console.log('fetch aborted')\n                } else {\n                    // auto catches network / connection error\n                    setIsPending(false);\n                    setError(err.message);\n                }\n            })\n    }\n\n    useEffect(() => {\n\n        freshBranches()\n\n    }, [url])\n\n    const ex = {\n        freshBranches\n    }\n\n    const getTitle = () => {\n        if (data && data.name) return data.name\n        else return 'Me 4 Life'\n    }\n\n    return (\n        <div>\n            { data &&\n            <div className={'wrapper'}>\n                <Helmet>\n                    <title>{ getTitle() }</title>\n                </Helmet>\n                <BranchView isDark={isDark} data={data} isPending={isPending} apiBase={apiBase} setUpToDate={setData} fontSize={fontSize} p={props.p} ex={ex} />\n            </div>\n                \n            }\n            { isPending && <i className=\"fas fa-spinner spinner\"></i>}\n            { error && <div> {error} </div>}\n        </div>\n    )\n}\n\nexport default Branch\n","F:\\React\\Tree\\src\\utils\\useWindowDimensions.js",[],"F:\\React\\Tree\\src\\utils\\getReqHeader.js",[],"F:\\React\\Tree\\src\\Components\\navbar\\Navbar.js",["300","301"],"/* \n* Navbar : \n    - content\n        - brand \n        - line-1\n            - nav links\n            - login \n    - actions\n        - dark\n        - toggle nav\n*/\nimport React, { useState } from 'react'\nimport \"./css/navbar.css\"\nimport NavLinks from './links/NavLinks'\nimport Brand from './brand/Brand'\nimport Login from './login/Login'\nimport { Link, useParams } from 'react-router-dom'\nimport { date1, date2 } from '../../utils/functions'\n\n\nfunction Navbar(props) {\n\n    const [time, setTime] = useState(new Date())\n\n    // extract data from the local storage\n    const getIsVisible = () => {\n        return localStorage.getItem('navBarVisible') &&\n            localStorage.getItem('navBarVisible') === \"true\"\n    }\n    // set state\n    const { p, userController, styleManager, isVisible, setVisible } = props\n\n    setVisible(getIsVisible)\n\n\n    // action functions\n    const toggleNav = () => {\n        setVisible(!isVisible)\n        localStorage.setItem('navBarVisible', !isVisible)\n    }\n\n    const toggleNight = () => {\n        p.setIsDark(!p.isDark)\n        localStorage.setItem('isDark', !p.isDark)\n        p.setBranchBKColor(p.getBranchBkColor('toggleNight'))\n    }\n    const biggerFont = () => {\n        const fSize = styleManager.fontSize + 2\n        styleManager.setFontSize(fSize)\n        localStorage.setItem('fontSize', fSize)\n    }\n    const smallerFont = () => {\n        const fSize = styleManager.fontSize - 2\n        styleManager.setFontSize(fSize)\n        localStorage.setItem('fontSize', fSize)\n    }\n\n    const branchesListToggleBranchMenu = () => {\n        p.setBranchesListBranchMenu(!p.branchesListIsBranchMenu)\n    }\n\n    const centerListText = () => {\n        p.setListAlign('center')\n    }\n    const leftListText = () => {\n        p.setListAlign('left')\n    }\n    const rightListText = () => {\n        p.setListAlign('right')\n    }\n\n    const toggleNum = () => {\n        p.setNumberedList(!p.numberedList)\n    }\n\n    const biggerMargin = () => {\n        p.setBranchMargin(p.branchMargin + 8)\n    }\n\n    const smallerMargin = () => {\n        p.setBranchMargin(p.branchMargin - 8)\n    }\n\n    const toggleBranchBkColor = () => {\n        p.setIsBranchBkColor(!p.isBranchBkColor)\n        p.setBranchBKColor(p.getBranchBkColor())\n    }\n\n    setInterval(() => {\n        setTime(new Date())\n    }, 1000 * 60);\n\n    return (\n        <div className={p.getCls('navbar')}>\n            {isVisible && <div className={p.getCls('content')}>\n                {/* navbar branch */}\n                <Brand p={p} />\n                {userController.token && userController.userCard &&\n                    <div className=\"user-welcome\" style={{ fontSize: 20 }}>\n                        welcome, <b>{userController.userCard.name.fname}</b>\n                    </div>\n                }\n                {/* time */}\n                <div className='r6UF4Bl'>\n                    {date1(time)}\n                </div>\n                <div className={p.getCls('line-1')}>\n                    {/* nav links  */}\n                    <NavLinks p={p} userController={userController} />\n                    {/* login form */}\n                    {!userController.token &&\n                        <Login p={p} userController={userController} />\n                    }\n                    {/* logout btn */}\n                    {userController.token &&\n                        <span onClick={handleLogOut} className={p.getCls('navbar-logout')}>logout</span>\n                    }\n                </div>\n            </div>}\n            {/* nav actions */}\n            <div className={p.getCls('nav-actions')}>\n                {/* branches list branch menu toggler */}\n                <span className=\"action-icon\" onClick={branchesListToggleBranchMenu}>\n                    <i className=\"fas fa-th-list\"></i>\n                </span>\n                {/* night mode toggle */}\n                <span onClick={toggleNight} className=\"action-icon\" >\n                    <i className=\"fas fa-moon\"></i>\n                </span>\n                {/* bigger font action */}\n                <span onClick={biggerFont} className=\"action-icon\" >\n                    <i className=\"fas fa-font\" style={{ fontSize: 16 }}></i>\n                </span>\n                {/* smaller font actions */}\n                <span onClick={smallerFont} className=\"action-icon\" >\n                    <i className=\"fas fa-font\" style={{ fontSize: 12 }}></i>\n                </span>\n                {/* bigger margin action */}\n                <span onClick={biggerMargin} className=\"action-icon\" >\n                    <i className=\"fas fa-text-height\" ></i>\n                </span>\n                {/* smaller margin actions */}\n                <span onClick={smallerMargin} className=\"action-icon\" >\n                    <i className=\"fas fa-text-height\" style={{ fontSize: 12 }}></i>\n                </span>\n                {/* navbar toggler */}\n                <span className=\"action-icon\" onClick={toggleNav}>\n                    <i className=\"fas fa-sliders-h\"></i>\n                </span>\n            </div>\n            {/* nav actions line 2 */}\n            <div className={p.getCls('nav-actions')}>\n                <span className=\"action-icon\" onClick={leftListText}>\n                    <i className=\"fas fa-align-left\"></i>\n                </span>\n                <span className=\"action-icon\" onClick={centerListText}>\n                    <i className=\"fas fa-align-center\"></i>\n                </span>\n                <span className=\"action-icon\" onClick={rightListText}>\n                    <i className=\"fas fa-align-right\"></i>\n                </span>\n                <span className=\"action-icon\" onClick={toggleNum}>\n                    <i className=\"fas fa-sort-numeric-down\"></i>\n                </span>\n                <Link to={'/html/'} className=\"action-icon\">\n                    <i className=\"fab fa-html5\"></i>\n                </Link>\n\n                <span className=\"action-icon\" onClick={toggleBranchBkColor}>\n                    <i className=\"fas fa-fill\"></i>\n                </span>\n\n            </div>\n        </div>\n    )\n\n    function handleLogOut() {\n        localStorage.removeItem('token')\n        localStorage.removeItem('userCard')\n        userController.setUserToken(null)\n        userController.setUserCard(null)\n    }\n}\n\nexport default Navbar\n","F:\\React\\Tree\\src\\Components\\branches\\BranchView.js",["302","303","304"],"import React, { useEffect, useState } from 'react'\nimport List from './list/List'\nimport { Link } from 'react-router-dom'\nimport RightPanel from '../rightSide/RightPanel'\nimport FlashCard from './FlashCard'\nimport Quizlet from './Quizlet'\nimport { tokenPatch, AsyncForEach, tokenGet, date1 } from '../../utils/functions'\n\nfunction BranchView(props) {\n    const { isDark, data, apiBase, setUpToDate, fontSize, p } = props\n    let { ex } = props\n    const { getCls } = p\n    const { freshBranches } = ex\n    const [sBranches, setSBranches] = useState([])\n    const [moveTarget, setMoveTarget] = useState('')\n    const [resMsg, setResMsg] = useState(null)\n    const [isFlashCard, setIsFlashCard] = useState(false)\n    const [isQuizlet, setIsQuizlet] = useState(false)\n    const [isAction, setIsAction] = useState(false)\n    const [parents, setParent] = useState([])\n    let branchTitle = []\n    if (data && data.name)\n        branchTitle = data.name.split('\\n')\n\n\n    const createDate = () => {\n        if (!data || !data.createdAt) return ''\n        const date = new Date(data.createdAt)\n        const typed = date1(date)\n        return typed\n\n    }\n\n    const flashCardReq = () => {\n        setIsAction(true)\n        setIsFlashCard(true)\n        setIsQuizlet(false)\n\n    }\n\n    const quizletReq = () => {\n        setIsAction(true)\n        setIsQuizlet(true)\n        setIsFlashCard(false)\n    }\n\n    const bOrigin = () => {\n        return (\n            <div className={getCls('BNBKece')}>\n                {data.origin &&\n                    <Link to={\"/\" + data.origin._id} className={`link ${isDark ? \"dark-link\" : \"light-link\"}`}>{data.origin.name}</Link>\n                }\n\n                {!data.origin &&\n                    <Link to={\"/\"} className={`link ${isDark ? \"dark-link\" : \"light-link\"}`}><i className=\"fas fa-home\"></i></Link>\n\n                }\n            </div>\n        )\n    }\n\n    const listActions = () => {\n        return (\n            <div className={getCls('container')}>\n                {p.navSts.isVisibleNav &&\n                    <div className={getCls('branch-list-header-actions')}>\n                        <div className={getCls('list-action')} onClick={() => { flashCardReq() }}>flash card</div>\n                        <div className={getCls('list-action')} onClick={() => { quizletReq() }}>Quizlet</div>\n                    </div>\n                }\n            </div>\n        )\n    }\n\n    const getCommand = () => {\n        if (data.command) return '#' + data.command\n        return ''\n    }\n\n    const getList = () => {\n        return (\n            <div className={getCls('gDhZZyqJTsAcIbvq')}>\n                {/* time */}\n                <div className={getCls('time')}>\n                    {createDate()}\n                </div>\n\n                {/* branch roots branches */}\n                <div className={getCls('parentW1')}>\n                    <div className={getCls('U7q')}>\n                        {parents.length > 0 && parents.map(parent => (\n                            <Link to={'/' + parent._id} key={parent._id} className={getCls('link') + ' VH9sY'}>\n                                <span className='mDCcQ'>/</span>\n                                <span className='JpN'>{parent.name}</span>\n                            </Link>\n                        ))}\n                    </div>\n                </div>\n\n\n                {/* branch title */}\n                <div className={getCls('branch-list-header')} style={{ textAlign: `${p.listAlign}` }}>\n                    <h1> {branchTitle.map(e => (\n                        <div key={getRandId()} className={getCls('branch-list-title')}>{e}</div>\n                    ))} </h1>\n                    {/* command */}\n                    <div className={getCls('YmOebB8')}>\n                        {getCommand()}\n                    </div>\n                </div>\n\n\n                {\n                    data.children &&\n                    <List branches={data.children} isDark={isDark} location={data._id} apiBase={apiBase} setUpToDate={setUpToDate} fontSize={fontSize} p={p} ex={ex} />\n                }\n\n                {\n                    !data.children &&\n                    <List branches={data} isDark={isDark} location={data._id} apiBase={apiBase} setUpToDate={setUpToDate} fontSize={fontSize} p={p} ex={ex} />\n                }\n            </div>\n        )\n    }\n\n    const handleMove = () => {\n        AsyncForEach(sBranches, () => {\n            sBranches.forEach((branch) => {\n                const url = apiBase + '/branch'\n                const data = {\n                    id: branch._id,\n                    origin: moveTarget\n                }\n                tokenPatch(url, data, p.token).then((d) => {\n                    if (d && d._d) console.log(d._id);\n                })\n            });\n        })\n        freshBranches()\n        setSBranches([])\n\n\n    }\n\n    useEffect(() => {\n        if (!data._id) return\n        tokenGet(p.apiBase + '/branch/pBranch?id=' + data._id)\n            .then((d) => {\n                if (d.reason) return\n                setParent(d.reverse())\n            })\n    }, [data])\n\n    ex = {\n        ...ex,\n        data, setIsAction, sBranches, setSBranches, freshBranches, branchTitle\n    }\n\n\n    const getListWrapperWidth = () => {\n        if (p.navSts.isVisibleNav) {\n            return 43\n        } else {\n            return 90\n        }\n    }\n\n    const getMoveSection = () => {\n        return (\n            <div className={getCls('wrapper')}>\n                {p.navSts.isVisibleNav &&\n                    <div className={getCls('move')}>\n                        <div className={getCls('input')}>\n                            <input type=\"text\" className={getCls('VaqSI')} value={moveTarget} onChange={(e) => { setMoveTarget(e.target.value) }} />\n                        </div>\n                        <div className={getCls('move1')} onClick={handleMove}>\n                            Move\n                        </div>\n                    </div>\n                }\n            </div>\n\n        )\n    }\n\n    return (\n        <div>\n            {data &&\n                <div className={p.getCls('branch-view-wrapper')}>\n                    <div className={getCls('Rta6QukC')}>\n                        {/* right panel */}\n                        <RightPanel p={p} />\n                        {/* move */}\n                        {getMoveSection()}\n                    </div>\n\n                    {!isAction &&\n                        /* origin name and list actions */\n                        < div className={p.getCls('branch-view-container')} style={{ width: getListWrapperWidth() + 'vw' }}>\n                            <div className={getCls('root-section')}>\n                                {bOrigin()}\n                                {listActions()}\n                            </div>\n\n\n                            {getList()}\n\n\n                        </div>\n                    }\n\n\n\n\n                    {isAction && isFlashCard &&\n                        <div className={getCls('flash-card-wrapper')}>\n                            <FlashCard p={p} ex={ex} />\n                        </div>\n                    }\n                    {isAction && isQuizlet &&\n                        <div className={getCls('flash-card-wrapper')}>\n                            <Quizlet p={p} ex={ex} />\n                        </div>\n                    }\n                </div>\n            }\n        </div >\n    )\n}\n\nfunction getRandId() {\n    return Math.random() * (200000 - 0) + 0\n}\n\nexport default BranchView\n","F:\\React\\Tree\\src\\Components\\navbar\\brand\\Brand.js",[],"F:\\React\\Tree\\src\\Components\\navbar\\links\\NavLinks.js",[],"F:\\React\\Tree\\src\\Components\\navbar\\login\\Login.js",[],"F:\\React\\Tree\\src\\Components\\branches\\list\\List.js",["305"],"import { React, useEffect, useState } from 'react'\nimport Single from '../single/Single'\nimport New from '../new/New'\nimport Edit from '../edit/Edit'\nimport './list.css'\n\nfunction List(props) {\n    const { branches, isDark, location, apiBase, setUpToDate, fontSize, p, ex } = props\n    const { sBranches, setSBranches } = ex\n    const [isEdit, setEdit] = useState(false)\n    const [branchToEdit, setBranchToEdit] = useState(null)\n\n\n    const getCls = (base) => {\n        return p.getCls('avGSVSTAflist-' + base)\n    }\n\n    let counted = 0\n\n    return (\n        <div className=\"list\">\n            \n            {!isEdit &&\n                <New location={location} isDark={isDark} apiBase={apiBase} setUpToDate={setUpToDate} p={p} />\n            }\n\n            <div className={getCls('branchesW') + \" branches-wrapper\"}>\n                <div className={getCls('branchesC') + \" branches-container\"} style={{ fontSize: fontSize }}>\n\n                    {branches.map(branch => (\n                        <Single key={branch._id} branch={branch} isDark={isDark} apiBase={apiBase} location={location} setData={setUpToDate} setEdit={setEdit} setBranch={setBranchToEdit} selectedBranches={sBranches} setSelected={setSBranches} p={p} counted={++counted} ex={ex} />\n                    ))}\n                </div>\n                {/* <Navi apiBase={apiBase} handleMove={handleMove} resMsg={resMsg} setResMsg={setResMsg} /> */}\n            </div>\n\n            {isEdit &&\n                <Edit location={location} isDark={isDark} apiBase={apiBase} setUpToDate={setUpToDate} branch={branchToEdit} setEdit={setEdit} />\n            }\n        </div>\n    )\n}\n\nexport default List\n","F:\\React\\Tree\\src\\Components\\navbar\\links\\NavLink.js",[],"F:\\React\\Tree\\src\\Components\\rightSide\\RightPanel.js",[],"F:\\React\\Tree\\src\\utils\\PostRequest.js",[],"F:\\React\\Tree\\src\\Components\\navbar\\register\\Register.js",[],"F:\\React\\Tree\\src\\Components\\branches\\single\\Single.js",["306","307","308","309","310","311","312","313","314","315"],"F:\\React\\Tree\\src\\Components\\rightSide\\latest\\LatestBranches.js",["316","317"],"import React, { useEffect, useState } from 'react'\nimport getReqHeader from '../../../utils/getReqHeader'\nimport './style.css'\nimport BranchItem from '../branch/BranchItem'\n\nfunction LatestBranches(props) {\n    const { p } = props\n    const getCls = (base) => { return p.getCls('RBfdg-' + base) }\n    const [latest, setLatest] = useState([])\n    const [isReady, setReady] = useState(false)\n    const [isVisi, setIsVisi] = useState(false)\n    useEffect(() => {\n        const header = { token: p.token }\n        const url = p.apiBase + '/branch/latest?limit=300'\n        getReqHeader(url, header).then((d) => {\n            // create temp arr\n            const temp = []\n            d.forEach(branch => {\n                if (branch.type === 'text')\n                    temp.push(branch)\n            });\n            setLatest(temp)\n            setReady(true)\n        })\n    }, [])\n    let latestCount = 1\n\n\n    const toggleLatest = () => {\n        setIsVisi(!isVisi)\n    }\n\n    return (\n        <div className={p.getCls('latest-branches-wrapper')} >\n            <h3 onClick={toggleLatest} className={getCls('title')}>Latest Branches</h3>\n            {isVisi && isReady  &&\n                <div className={p.getCls('latest-branches-right-side')}  >\n                    {latest.map(branch => (\n                        <BranchItem key={latestCount++} position={latestCount} branch={branch} p={p} />\n                    ))}\n                </div>\n            }\n            {!isReady && isVisi && \n                <i className=\"fas fa-spinner spinner\"></i>\n            }\n        </div>\n    )\n}\n\nfunction getRandId() {\n    return Math.random() * (200000 - 0) + 0\n}\n\nexport default LatestBranches\n","F:\\React\\Tree\\src\\Components\\rightSide\\search\\Search.js",[],"F:\\React\\Tree\\src\\Components\\rightSide\\branch\\BranchItem.js",["318"],"import React from 'react'\r\nimport './style.css'\r\nimport { Link } from 'react-router-dom'\r\n\r\nfunction BranchItem(props) {\r\n    const { p, branch, position } = props\r\n\r\n    return (\r\n        <div className={p.getCls('right-panel-branch-item')} >\r\n            <Link className={p.getCls('branch-item-name')} to={'/' + branch._id}>\r\n                {branch.name}\r\n            </Link>\r\n            {branch.origin &&\r\n                <Link className={p.getCls('branch-item-origin')} to={'/' + branch.origin._id}>\r\n                    {branch.origin.name}\r\n                </Link>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default BranchItem\r\n","F:\\React\\Tree\\src\\Components\\branches\\new\\New.js",[],"F:\\React\\Tree\\src\\Components\\branches\\edit\\Edit.js",["319"],"import React, { useState } from 'react'\nimport '../new/new.css'\n\nfunction Edit(props) {\n    let { location, isDark, apiBase, setUpToDate, branch, setEdit } = props\n    const [newBranchPending, setNewBranchPending] = useState(false)\n    const [branchName, setBranchName] = useState('')\n    const [linkName, setLinkName] = useState('')\n    const [oldName, setOldName] = useState(branch.name)\n    const [oldLinkName, setOldLinkName] = useState(\n        branch.extra && branch.extra.name ? branch.extra.name : branch.name\n    )\n    const [branchType, setBranchType] = useState(branch.type)\n    if (!location) location = ''\n\n\n\n    const submitClick = () => {\n        setNewBranchPending(true)\n        const url = apiBase + '/branch'\n        const data = {\n            id: branch._id,\n            name: branchName,\n            type: branchType,\n            origin: location\n        }\n\n        if(branchType === 'link'){\n            data['extra'] ?  branchType = 'link' : data['extra'] = {}\n            data['extra']['name'] = linkName\n        }\n\n        postData(url, data).then(res => {\n            setNewBranchPending(false)\n\n            // fetch new branches . \n            let url\n            location.length > 0 ? url = apiBase + '/branch?id=' + location : url = apiBase + '/branch'\n            fetch(url).then(d => {\n                return d.json()\n            }).then(e => {\n                if (location.length > 0)\n                    setUpToDate(e)\n                else {\n                    // extract root branches : \n                    // extract root branches : \n                    const rootBranches = e.filter((b) => {\n                        return b.origin == null\n                    })\n                    setUpToDate(rootBranches)\n\n                }\n                setBranchType('text')\n                setEdit(false)\n            })\n\n        })\n    }\n\n    async function postData(url = '', data = {}) {\n        // Default options are marked with *\n        const response = await fetch(url, {\n            method: 'PATCH', // *GET, POST, PUT, DELETE, etc.\n            mode: 'cors', // no-cors, *cors, same-origin\n            cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n            credentials: 'same-origin', // include, *same-origin, omit\n            headers: {\n                'Content-Type': 'application/json'\n                // 'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            redirect: 'follow', // manual, *follow, error\n            referrerPolicy: 'no-referrer', // no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url\n            body: JSON.stringify(data) // body data type must match \"Content-Type\" header\n        });\n        return response.json(); // parses JSON response into native JavaScript objects\n    }\n\n    const handleNameChange = (e) => {\n        setBranchName(e.target.innerText)\n    }\n    const handleLinkNameChange = (e) => {\n        setLinkName(e.target.innerText)\n    }\n\n    \n\n    const branchTypeChange = (e) => {\n        setBranchType(e.target.value)\n    }\n\n\n    const getSelectBranchType = () => {\n        return (\n            <select className=\"select-branch-type\" name=\"type\" onChange={(e) => {\n                branchTypeChange(e)\n            }}>\n                <option value={branchType} selected=\"true\">{branchType}</option>\n                <option value=\"text\">text</option>\n                <option value=\"image\">image</option>\n                <option value=\"link\">link</option>\n                <option value=\"gist\">gist</option>\n                <option value=\"sound\">sound</option>\n                <option value=\"youtube\">youtube</option>\n                <option value=\"video\">video</option>\n            </select>\n        )\n    }\n\n\n    const getEditLinkForm = () => {\n        const form =\n            (<div className=\"new-branch-form\">\n                <h2>Edit Link</h2>\n                <div contentEditable=\"true\" id=\"branchName\" className=\"input-name\" onInput={(e) => handleNameChange(e)}> {oldName} </div>\n                <div contentEditable=\"true\" className=\"input-name\" onInput={(e) => handleLinkNameChange(e)}> {oldLinkName} </div>\n                <button type=\"submit\" onClick={() => {setEdit(false)}} className={`save-branch-btn ${isDark ? \"cancel-edit-branch-dark\" : \"cancel-edit-branch-light\"}`}>cancel</button>\n                {getSelectBranchType()}\n                <button type=\"submit\" onClick={submitClick} className={`save-branch-btn ${isDark ? \"save-branch-dark\" : \"save-branch-light\"}`}>Save</button>\n            </div>)\n            return form\n    }\n\n    const getInputForm = () => {\n        let form =\n            (<div className=\"new-branch-form\">\n                <h2>Edit</h2>\n                <div contentEditable=\"true\" id=\"branchName\" className=\"input-name\" onInput={(e) => handleNameChange(e)}> {oldName} </div>\n                {getSelectBranchType()}\n                <button type=\"submit\" onClick={submitClick} className={`save-branch-btn ${isDark ? \"save-branch-dark\" : \"save-branch-light\"}`}>Save</button>\n            </div>)\n        if (branchType === 'link') {\n            form = getEditLinkForm()\n        }\n        return form\n    }\n\n    const getSpinner = (e) => {\n        return (\n            <i className=\"fas fa-spinner spinner save-branch-spinner\"></i>\n        )\n    }\n\n    return (\n        <div className={`form-container ${isDark ? \"dark-form-container\" : \"light-form-container\"}`}>\n            {!newBranchPending && getInputForm()}\n            {newBranchPending && getSpinner()}\n        </div>\n    )\n}\n\nexport default Edit\n","F:\\React\\Tree\\src\\Components\\branches\\new\\BranchLang.js",["320","321"],"import { React, useState } from 'react'\n\nfunction BranchLang(props) {\n    const { lang, setLang, branchType } = props\n\n\n    const getSelectableLang = () => {\n        return (\n            <select className=\"select-branch-lang\" name=\"lang\" onChange={(e) => {\n                setLang(e.target.valuef)\n            }}>\n                <option value=\"ar\">Arabic</option>\n                <option value=\"en\">English</option>\n            </select>\n        )\n    }\n\n    const isTextBranch = () => {\n        if (branchType === 'text') return true\n        return false\n    }\n\n    return (\n        <div>\n            {isTextBranch && getSelectableLang()}\n        </div>\n    )\n}\n\nexport default BranchLang\n","F:\\React\\Tree\\src\\pages\\TimeLine.js",["322","323"],"import { React, useState, useEffect } from 'react'\nimport { useParams } from 'react-router-dom'\nimport getReqHeader from '../utils/getReqHeader'\nimport TimeLineHeader from '../Components/timeline/TimeLineHeader'\nimport TimeLineBody from '../Components/timeline/TimeLineBody'\n\nfunction TimeLine(props) {\n    // create state\n    const [data, setData] = useState(null)\n    const [isProg, setIsProg] = useState(false)\n    const [isDate, setIsDate] = useState(false)\n\n    const ex = {\n        setData, branches:data, isProg, setIsProg, isDate, setIsDate\n    }\n    // extract date from the props\n    const { fontSize, p } = props\n    // extract url data\n    const { id } = useParams()\n    const { dir } = useParams()\n    // get dataFrom the Database.\n    const url = p.apiBase + '/branch/timeline?id=' + id + '&dir=' + dir\n    useEffect(() => {\n        setIsProg(true)\n        getReqHeader(url, { token: props.p.token })\n            .then((d) => {\n                setData(d)\n                setIsProg(false)\n                console.log(d)\n            })\n        \n    }, [])\n\n\n\n\n    const getCls = (baseName) => {\n        return p.getCls('p2time-line-' + baseName)\n    }\n    return (\n        <div className={getCls('wrapper')}>\n            <TimeLineHeader p={p} ex={ex} />\n            {/* loaded successfully and there is data */}\n            {!isProg && data && data.length > 0 &&\n                <div className={getCls('container')}>\n                    <TimeLineBody p={p} ex={ex} />\n                </div>\n            }\n            {/* loaded successfully but not data founded */}\n            {!isProg && data && data.length <= 0 &&\n                <div className={getCls('empty-container')}>\n                    there is no branches.\n                </div>\n            }\n            {isProg &&\n                <i className=\"fas fa-spinner spinner\"></i>\n            }\n        </div>\n    )\n}\n\nexport default TimeLine\n","F:\\React\\Tree\\src\\Components\\timeline\\TimeLineHeader.js",["324"],"import { React, useState } from 'react'\nimport \"./style.css\"\nimport getReqHeader from '../../utils/getReqHeader'\n\n\nfunction TimeLineHeader(props) {\n    const { p } = props\n    const [location, setLocation] = useState('/timeline')\n    const { setData, setIsProg, isDate, setIsDate } = props.ex\n    const [inputVal, setInputVal] = useState(null)\n\n    const handleBranchChange = (e) => {\n        // store input value to the state\n        setInputVal(e.target.value)\n    }\n\n    const getCls = (base) => {\n        return p.getCls(\"time-line-header-\" + base)\n    }\n\n\n    const downClk = () => {\n        // check if url id\n        if (location === '/timeline') {\n\n        }\n        // check if input id\n        if (inputVal.trim().length > 3) {\n            setIsProg(true)\n            // send request. \n            const url = p.apiBase + '/branch/timeline?id=' + inputVal + '&dir=before'\n            getReqHeader(url, { token: p.token }).then(d => {\n                setData(d)\n                setIsProg(false)\n            })\n\n        }\n    }\n    const upClk = () => {\n        // check if url id\n        if (location === '/timeline') {\n\n        }\n        // check if input id\n        if (inputVal.trim().length > 3) {\n            setIsProg(true)\n            // send request. \n            const url = p.apiBase + '/branch/timeline?id=' + inputVal + '&dir=after'\n            getReqHeader(url, { token: p.token }).then(d => {\n                setIsProg(false)\n                setData(d)\n            })\n\n        }\n    }\n\n    const toggleDate = () => {\n        setIsDate(!isDate)\n    }\n\n    return (\n        <div className={getCls('wrapper')}>\n            <button onClick={() => downClk()}> before </button>\n            <input type=\"text\" onChange={(e) => { handleBranchChange(e) }} />\n            <button onClick={() => upClk()}> after </button>\n            <span onClick={() => toggleDate()} className=\"\"><i className=\"fas fa-clock \"></i></span>\n             \n        </div>\n    )\n}\n\nexport default TimeLineHeader\n","F:\\React\\Tree\\src\\Components\\timeline\\TimeLineBody.js",["325","326","327"],"import { React, useState } from 'react'\nimport \"./style.css\"\nimport Branch from './parts/Branch'\n\nfunction TimeLienBody(props) {\n    const { p } = props\n    const { branch, branches, isDate} = props.ex\n\n    const getCls = (base) => {\n        return p.getCls(\"time-line-body-\" + base)\n    }\n    return (\n        <div className={getCls('wrapper')} style={{ fontSize: p.fontSize }}>\n            {branches &&\n                branches.map(branch => (\n                    <Branch p={p} branch={branch} key={branch._id} ex={props.ex} />\n                ))\n            }\n        </div>\n    )\n}\n\nexport default TimeLienBody\n","F:\\React\\Tree\\src\\Components\\timeline\\parts\\Branch.js",[],"F:\\React\\Tree\\src\\pages\\BranchDtl.js",["328","329"],"/* \nanother way to show branches.  \n*/\nimport { useParams, Link } from 'react-router-dom'\nimport React, { useEffect, useState } from 'react'\nimport getReqHeader from '../utils/getReqHeader'\nimport BranchList from '../Components/branchDtl/BranchesList'\n\nfunction BranchDtl(props) {\n    const { p } = props\n    let { id } = useParams()\n    const [branches, setBranches] = useState(null)\n    const [branch, setBranch] = useState(null)\n    if(props.id) id = props.id\n    // export \n    const data = {\n        p, branches\n    }\n\n    // functions\n    const getCls = (base) => {\n        return p.getCls('br0' + base)\n    }\n\n    // connection\n    useEffect(() => {\n        getReqHeader(p.apiBase + '/branch')\n            .then((d) => {\n                // set branches source\n                setBranches(d)\n                // set target branch\n                const b = d.find((e) => {\n                    return e._id.toString() === id\n                })\n                setBranch(b)\n            })\n    }, [])\n\n\n    /* \n   branch name \n   branch children \n   branch children children children\n   */\n\n\n    return (\n        <div className={getCls('2')} style={{fontSize: p.fontSize}}>\n\n            {/* branch container */}\n            {branch &&\n                <div className=\"\">\n                    {/* // branch children.  */}\n                    <div className={getCls('ch-co')} >\n                        <BranchList data={data} branch={branch} />\n                    </div>\n                </div>\n            }\n            { !branch && <i className=\"fas fa-spinner spinner\"></i>}\n\n        </div>\n\n\n    )\n}\n\n\n\n\n\n\n\n\nexport default BranchDtl\n","F:\\React\\Tree\\src\\Components\\branchDtl\\BranchesList.js",["330","331","332","333"],"import React, { useEffect, useState } from 'react'\n\nfunction BranchesList(props) {\n    // extract data from the store\n    // p, id, branches, branch\n    const data = props.data\n    if (props.origin) data.branch = props.origin\n\n    // create state\n    const [loading, setLoading] = useState(true)\n    const [children, setChildren] = useState(null)\n    const [visible, setVisible] = useState(false)\n    const [branch, setBranch] = useState(props.branch)\n\n    // functions \n    const getCls = (base) => {\n        return data.p.getCls('d1-' + base)\n    }\n\n    useEffect(() => {\n        setLoading(false)\n        setChildren(data.branches.filter((e) => {\n            if (e.origin) {\n                return e.origin._id === branch._id\n            }\n        }))\n    }, [])\n\n    const toggleList = () => {\n        if(visible){\n            \n        }else{\n\n        }\n        setVisible(!visible)\n    }\n\n    // create component header . \n    const getHeader = () => {\n        const element =\n            <div className={getCls('branch-header') + `children`}>\n                <div className={getCls('header')} onClick={toggleList} >\n                    <div className={getCls('name-line')} > </div>\n                    {branch.name}\n                    <div className={getCls('name-line')} > </div>\n                </div>\n            </div>\n\n        return element\n    }\n\n\n    // create children component. \n    const getCldList = () => {\n        if (!visible || !children) return\n\n        const arr = []\n\n        children.forEach((d) => {\n            if (!d.children || d.children.length <= 0) {\n                const obj =\n                    <div className={getCls('list-item')} key={d._id}>\n                        {d.name}\n                    </div>\n                arr.push(obj)\n            } else {\n\n                arr.push(\n                    <BranchesList data={data} branch={d} />\n                )\n            }\n\n        })\n\n\n        return arr\n    }\n\n\n\n    return (\n        <div className={getCls('child-wrapper')}>\n            {getHeader()}\n            {getCldList()}\n        </div>\n    )\n\n\n}\n\nexport default BranchesList\n\n","F:\\React\\Tree\\src\\utils\\functions.js",["334","335","336","337","338"],"export function getID(length) {\n    var result = '';\n    var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    var charactersLength = characters.length;\n    for (var i = 0; i < length; i++) {\n        result += characters.charAt(Math.floor(Math.random() * charactersLength));\n    }\n    return result;\n}\n\nexport function getSpinner() {\n    return <i className=\"fas fa-spinner spinner\"></i>\n}\nexport function v2Spinner(name) {\n    return <i className={\"fas fa-spinner spinnerV2 \" + name}></i>\n}\nexport function startLine(w, h, classes) {\n    return <div className={classes} style={{\n        width: w + 'px',\n        height: h + 'px'\n    }}></div>\n}\n\n\n\nexport async function deleteWHeader(url = '', headers) {\n    // Default options are marked with *\n    const response = await fetch(url, {\n        method: 'DELETE', // *GET, POST, PUT, DELETE, etc.\n        mode: 'cors', // no-cors, *cors, same-origin\n        cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n        credentials: 'same-origin', // include, *same-origin, omit\n        redirect: 'follow', // manual, *follow, error\n        referrerPolicy: 'no-referrer', // no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url\n        headers,\n    })\n    return response.json(); // parses JSON response into native JavaScript objects\n}\nexport async function tokenPost(url = '', data = {}, token) {\n    // Default options are marked with *\n    const response = await fetch(url, {\n        method: 'POST', // *GET, POST, PUT, DELETE, etc.\n        mode: 'cors', // no-cors, *cors, same-origin\n        cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n        credentials: 'same-origin', // include, *same-origin, omit\n        headers: {\n            'Content-Type': 'application/json',\n            'token': token\n            // 'Content-Type': 'application/x-www-form-urlencoded',\n        },\n        redirect: 'follow', // manual, *follow, error\n        referrerPolicy: 'no-referrer', // no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url\n        body: JSON.stringify(data) // body data type must match \"Content-Type\" header\n    });\n    return response.json(); // parses JSON response into native JavaScript objects\n}\n\nexport async function tokenPatch(url = '', data = {}, token) {\n    // Default options are marked with *\n    const response = await fetch(url, {\n        method: 'PATCH', // *GET, POST, PUT, DELETE, etc.\n        mode: 'cors', // no-cors, *cors, same-origin\n        cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n        credentials: 'same-origin', // include, *same-origin, omit\n        headers: {\n            'Content-Type': 'application/json',\n            'token': token\n            // 'Content-Type': 'application/x-www-form-urlencoded',\n        },\n        redirect: 'follow', // manual, *follow, error\n        referrerPolicy: 'no-referrer', // no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url\n        body: JSON.stringify(data) // body data type must match \"Content-Type\" header\n    });\n    return response.json(); // parses JSON response into native JavaScript objects\n}\n\nexport async function tokenGet(url = '', headers) {\n    // Default options are marked with *\n    const response = await fetch(url, {\n        method: 'GET', // *GET, POST, PUT, DELETE, etc.\n        mode: 'cors', // no-cors, *cors, same-origin\n        cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n        credentials: 'same-origin', // include, *same-origin, omit\n        redirect: 'follow', // manual, *follow, error\n        referrerPolicy: 'no-referrer', // no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url\n        headers,\n    })\n    return response.json(); // parses JSON response into native JavaScript objects\n}\n\nexport async function tokenDelete(url = '', token) {\n    // Default options are marked with *\n    const response = await fetch(url, {\n        method: 'DELETE', // *GET, POST, PUT, DELETE, etc.\n        mode: 'cors', // no-cors, *cors, same-origin\n        cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n        credentials: 'same-origin', // include, *same-origin, omit\n        redirect: 'follow', // manual, *follow, error\n        referrerPolicy: 'no-referrer', // no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url\n        headers: { token },\n    })\n    return response.json(); // parses JSON response into native JavaScript objects\n}\n\n\nasync function asyncFor(array, callback) {\n    for (let index = 0; index < array.length; index++) {\n        await callback(array[index], index, array);\n    }\n}\n\nexport const AsyncForEach = async (arr, func) => {\n    await asyncFor(arr, async (num) => {\n        func()\n    });\n}\n\nexport function date1(date) {\n    const monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\n        \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n    const dateObj = date;\n    const month = monthNames[dateObj.getMonth()];\n    const day = String(dateObj.getDate()).padStart(2, '0');\n    const year = dateObj.getFullYear();\n    let hour = dateObj.getMinutes() + 1;\n    let min = dateObj.getHours()\n\n    hour < 10 ? hour = \"0\" + hour : hour = hour\n    min < 10 ? min = \"0\" + min : min = min\n\n    return (\n        <div className=\"qC8tN\"><div className='XWusL-date'>\n            <span className='qC8tN-'>{month}</span>\n            <span className='qC8tN-'>{day}</span>\n            <span className='qC8tN-'>{year}</span>\n        </div>\n            <div className='XWusL-time'>\n\n                <span className='XWusL-m'>{min}</span>\n                <span>:</span>\n                <span className='XWusL-h'>{hour}</span>\n            </div></div>\n\n    )\n}\n\nexport function date2(date) {\n    const monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\n        \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n    const dateObj = date;\n    const month = monthNames[dateObj.getMonth()];\n    const day = String(dateObj.getDate()).padStart(2, '0');\n    const year = dateObj.getFullYear();\n    let min = dateObj.getMinutes() + 1;\n    let hour = dateObj.getHours()\n    let sec = dateObj.getSeconds()\n\n    hour < 10 ? hour = \"0\" + hour : hour = hour\n    min < 10 ? min = \"0\" + min : min = min\n    sec < 10 ? sec = \"0\" + sec : sec = sec\n\n    return (\n        <div className=\"qC8tNgx8bx0dEav75JAWh\"><div className='XWusL-date'>\n            <span className='qC8tN-'>{month}</span>\n            <span className='qC8tN-'>{day}</span>\n            <span className='qC8tN-'>{year}</span>\n        </div>\n            <div className='XWusL-time'>\n                <span className='XWusL-h'>{hour}</span>\n                <span>:</span>\n                <span className='XWusL-m'>{min}</span>\n                <span>:</span>\n                <span className='XWusL-s'>{sec}</span>\n\n            </div></div>\n\n    )\n}","F:\\React\\Tree\\src\\pages\\ByTime.js",["339"],"import React, { useEffect, useState } from 'react'\nimport getWHeader from '../utils/getReqHeader'\nimport { getSpinner } from '../utils/functions'\nimport ByTimeList from '../Components/byTime/by-time-list'\nimport '../Components/byTime/style.css'\nimport DateTimePicker from 'react-datetime-picker';\n\nfunction ByTime(props) {\n    // extract the data from the props\n    const p = props.p\n    // create state. \n    const [time, setTime] = useState(null)\n    const [loading, setLoading] = useState(false)\n    const [targetBranches, setTargetBranches] = useState([])\n    const [newestDir, setNewestDir] = useState('up')\n    const [oldestDir, setOldestDir] = useState('up')\n\n\n    // functions\n    const getCls = (base) => {\n        return p.getCls('by-time-' + base)\n    }\n\n\n    const handleChange = (e) => {\n        if (!e || e.Date) return\n        setTime(e)\n    }\n\n    // change branches direction. \n    const changeNewestDirection = () => {\n        // toggle directions\n        if (newestDir === 'up') setNewestDir('down')\n        else { setNewestDir('up') }\n\n        if (time) {\n            setLoading(true)\n            const url = p.apiBase + '/branch/byTimeNewest?time=' + time + '&dir=' + newestDir\n            getWHeader(url, { token: p.token })\n                .then(d => {\n                    setTargetBranches(d)\n                    setLoading(false)\n                })\n        }\n    }\n    const changeOldestDirection = () => {\n        // toggle directions\n        if (oldestDir === 'up') setOldestDir('down')\n        else { setOldestDir('up') }\n\n        if (time) {\n            setLoading(true)\n            const url = p.apiBase + '/branch/byTimeOldest?time=' + time + '&dir=' + oldestDir\n            getWHeader(url, { token: p.token })\n                .then(d => {\n                    setTargetBranches(d)\n                    setLoading(false)\n                })\n        }\n    }\n\n    const ex = {\n        p, getCls, targetBranches\n    }\n\n    return (\n        <div>\n            {!loading &&\n                <div>\n                    <div className={getCls('form')}>\n                        <span onClick={changeOldestDirection} className={getCls('change-dir')}><i className=\"fas fa-sort-amount-down\"></i></span>\n                        <DateTimePicker\n                            onChange={handleChange}\n                            value={time}\n                            className={getCls('picker')}\n                        />\n                        <span onClick={changeNewestDirection} className={getCls('change-dir')}><i className=\"fas fa-sort-amount-up\"></i></span>\n                    </div>\n                    <div className={getCls('list')}>\n                        <ByTimeList ex={ex} />\n                    </div>\n                </div>\n            }\n            {loading && getSpinner()}\n        </div>\n    )\n}\n\nexport default ByTime\n","F:\\React\\Tree\\src\\Components\\byTime\\by-time-list.js",[],"F:\\React\\Tree\\src\\Components\\byTime\\by-time-item.js",["340","341","342","343","344","345","346","347"],"import React, { useState } from 'react'\nimport { Link } from 'react-router-dom'\nimport { deleteWHeader } from '../../utils/functions'\nimport ReactEmbedGist from 'react-embed-gist';\nimport ReactAudioPlayer from 'react-audio-player';\nimport { Player } from 'video-react';\n\n\nfunction ByTimeItem(props) {\n    // extract data \n    const { branch, ex } = props\n    const { isDark } = ex.p\n    // create state \n    const [isDeleted, setIsDeleted] = useState(false)\n\n    // functions\n    const getCls = (base) => {\n        return ex.p.getCls('by-time-item-' + base)\n    }\n\n    const getDate = () => {\n        const date = new Date(branch.createdAt)\n        let year, month, day, hour, min\n        year = date.getFullYear()\n        month = date.getMonth() + 1\n        day = date.getDate() + 1\n        hour = date.getHours() + 1\n        min = date.getMinutes() + 1\n\n        hour < 10 ? hour = '0' + hour : hour = hour\n        min < 10 ? min = '0' + min : min = min\n        day < 10 ? day = '0' + day : day = day\n        month < 10 ? month = '0' + month : month = month\n\n        return (\n            <div className={getCls('date')}>\n                <div className={getCls('date-date')} >{day} . {month} . {year} </div>\n                <div className={getCls('date-time')} > {hour} : {min}  </div>\n            </div>\n        )\n    }\n\n    const handleRemove = () => {\n        const url = ex.p.apiBase + '/branch?id=' + branch._id\n        deleteWHeader(url, { token: ex.p.token })\n            .then((d) => {\n                setIsDeleted(true)\n                console.log(d);\n            })\n    }\n\n    const branchDir = () => {\n        if (branch.lang == 'ar') return 'rtl'\n        else return 'ltr'\n    }\n\n    function getWindowDimensions() {\n        const { innerWidth: width, innerHeight: height } = window;\n        return {\n            width,\n            height\n        };\n    }\n    const getLinkContent = () => {\n        let res = ''\n        if (branch.extra && branch.extra.name) {\n            res = (<Link className={ex.p.getCls('link')} to={'/' + branch.name}>{branch.extra.name}</Link>)\n        } else {\n            res = (<Link className={ex.p.getCls('link')} to={'/' + branch.name}>{branch.name}</Link>)\n        }\n\n        return res\n    }\n\n\n\n    const getTextContent = () => {\n        return <div dangerouslySetInnerHTML={{ __html: branch.name.replace(\"<br>\", \"\").replace(/\\n\\n/g, \"<br>\").replace(/\\n/g, \"<br>\") }} className={`link branch-name-byTime ${isDark ? \"dark-link\" : \"light-link\"}`} style={{ direction: `${branchDir()}` }, {fontSize: ex.p.fontSize}}>\n        </div>\n    }\n\n    const getYoutubeSource = () => {\n        return \"https://www.youtube.com/embed/\" + branch.name\n    }\n\n    const getYoutubeContent = () => {\n        // check client width : \n        if (getWindowDimensions().width > 600) {\n            return <div className=\"youtube-container\">\n                <iframe width=\"auto\" height=\"auto\" src={getYoutubeSource()} frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n            </div>\n        } else {\n            return <div className=\"youtube-container\">\n                <iframe width=\"300\" height=\"250\" src={getYoutubeSource()} frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen='true'></iframe>\n            </div>\n        }\n    }\n\n    const getGistContent = () => {\n        return <ReactEmbedGist gist={branch.name} titleClass=\"gist__title\"\n            contentClass=\"gist__content\" />\n    }\n\n    const getSoundContent = () => {\n        // \n        // {branch.name}\n        const audio = <ReactAudioPlayer\n            src={branch.name}\n            controls\n            loop\n        />\n\n        return audio\n    }\n\n    const getImageContent = () => {\n        // check client width : \n        if (getWindowDimensions().width > 600) {\n            return <img style={{ maxWidth: 300 }} src={branch.name} alt=\"\" />\n        } else {\n            return <img style={{ width: 300 }} src={branch.name} alt=\"\" />\n        }\n    }\n\n    const getVideoContent = () => {\n        const e = <Player className=\"video-player\">\n            <source src={branch.name} />\n        </Player>\n        return e\n    }\n\n    const getBranch = () => {\n        let content;\n        if (branch.type === 'text') {\n            content = getTextContent()\n        }\n        if (branch.type === 'image') {\n            content = getImageContent()\n        }\n\n        if (branch.type === 'youtube') {\n            content = getYoutubeContent()\n        }\n        if (branch.type === 'gist') {\n            content = getGistContent()\n        }\n        if (branch.type === 'sound') {\n            content = getSoundContent()\n        }\n        if (branch.type === 'video') {\n            content = getVideoContent()\n        }\n        if (branch.type === 'link') {\n            content = getLinkContent()\n        }\n\n        return content\n    }\n\n\n    return (\n        <div >\n            {!isDeleted &&\n                <div className={getCls('container')}>\n                    <div className={getCls('more-container')}><Link className={getCls('more')} to={\"/\" + branch._id} target=\"_blank\">المزيد</Link> <span className={getCls('remove')} onClick={handleRemove} >حذف</span>\n                    </div>\n\n                    <div className={getCls('name')} >{getBranch()}</div>\n                    <div className={getCls('date-container')} >{getDate()}</div>\n                </div>\n            }\n        </div>\n    )\n}\n\nexport default ByTimeItem\n","F:\\React\\Tree\\src\\Components\\branches\\FlashCard.js",["348"],"import React, { useState } from 'react'\n\nfunction FlashCard(props) {\n\n\n    const { p, ex } = props\n    const { data, setIsAction } = props.ex\n    // branches array\n    let els = []\n    // current position in the array\n    const [position, setPosition] = useState(0)\n\n    const getElements = () => {\n        // check if the data has array \n        if (data.children.length <= 0) return\n        els = data.children\n    }\n\n    const getCls = (base) => {\n        return p.getCls('fc-' + base)\n    }\n\n    const exit = () => {\n        setIsAction(false)\n    }\n\n    const exitBtn = () => {\n        return (\n            <div className={getCls('action-cont') + ' fs-close-icon'}>\n                <i className={getCls('exit') + ' far fa-times-circle'}\n                    onClick={() => { exit() }}></i>\n            </div>\n        )\n    }\n\n    const changePosition= (delta)=> {\n        let p1\n        p1 = delta + position\n        if(position === els.length -1 ) p1 = 0\n        if(position === 0 ) if(delta < 0) p1 = els.length - 1\n        setPosition(p1)\n        \n\n    }\n\n    \n\n    return (\n        <div className={getCls('container')}>\n            <div className={getCls('actions')}>\n                {exitBtn()}\n            </div>\n            {getElements()}\n            <div className={getCls('flash-section')}>\n                <div onClick={() => {changePosition(-1)}} className={getCls('up-btn') + \" dir-controller\"}>\n                    <i className=\"fas fa-arrow-alt-circle-up\"></i>\n                </div>\n\n                <div className={getCls('name')} style={{ fontSize: p.fontSize }}>\n                    {els[position].name}\n                </div>\n                <div onClick={() => {changePosition(1)}} className={getCls('down-btn') + \" dir-controller\"}>\n                    <i className=\"fas fa-arrow-alt-circle-down\"></i>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default FlashCard\n","F:\\React\\Tree\\src\\Components\\branches\\Quizlet.js",["349","350"],"import React from 'react'\n\nfunction Quizlet(props) {\n\n    const { p, ex } = props\n    const { data, setIsAction } = props.ex\n\n    const getCls = (base) => {\n        return p.getCls('fc-' + base)\n    }\n\n    const exit = () => {\n        setIsAction(false)\n    }\n\n    const exitBtn = () => {\n        return (\n            <div className={getCls('action-cont') + ' fs-close-icon'}>\n                <i className={getCls('exit') + ' far fa-times-circle'}\n                    onClick={() => { exit() }}></i>\n            </div>\n        )\n    }\n\n    const getQuizletText= () => { \n        const list = data.children\n        if(list.length <= 0) return \n        let d = ''\n        let counter = 0\n        list.forEach(e => {\n            counter ++ \n            d = d + e.name + ',:'\n        });\n        return d\n    } \n    const getQuizletTextWithCounter= () => { \n        const list = data.children\n        if(list.length <= 0) return \n        let d = ''\n        let counter = 0\n        list.forEach(e => {\n            counter ++ \n            d = d + counter + ',' + e.name + ':'\n        });\n        return d\n    }\n\n    return (\n        <div className={getCls('container')}>\n            <div className={getCls('actions')}>\n                {exitBtn()}\n            </div>\n            <div className={getCls('content')}>\n                <h2>Content : </h2>\n                {getQuizletText()}\n                <h2>With Counter </h2>\n                {getQuizletTextWithCounter()}\n            </div>\n        </div>\n    )\n}\n\nexport default Quizlet\n","F:\\React\\Tree\\src\\Components\\branches\\new\\groups\\Group.js",["351","352"],"import { cleanup } from '@testing-library/react'\nimport React, { useState, useEffect } from 'react'\nimport List from './List'\nimport Input from './Input'\n\nfunction Group(props) {\n    const { p } = props\n    let { ex } = props\n    const getCls = (base) => { return p.getCls('G2WLWX-' + base) }\n\n    const [vs, sVs] = useState(false)\n    const [rGroups, setRGroups] = useState([])\n    const [newGName, setNewGName] = useState(null)\n    \n\n    \n   ex = {...ex,\n    newGName, setNewGName, rGroups, setRGroups\n   }\n    return (\n        <div className={getCls('wrapper')}>\n            <div className={getCls('title')}>\n                <h2\n                    className={getCls('tog-ti')}\n                    onClick={() => { sVs(!vs) }}>\n                    Groups\n                </h2>\n                {vs &&\n                    <div className={getCls('fMWt94')}>\n                        <Input ex={ex} p={p} />\n                        <List ex={ex} p={p} />\n                    </div>\n                }\n\n            </div>\n\n        </div>\n    )\n}\n\nexport default Group\n","F:\\React\\Tree\\src\\Components\\branches\\new\\persons\\Person.js",["353"],"import React, { useState, useEffect } from 'react'\r\nimport List from './List'\r\nimport Input from './Input'\r\n\r\n\r\nfunction Person(props) {\r\n    const { p } = props\r\n    let { ex } = props\r\n    const getCls = (base) => { return p.getCls('QBBwJ-' + base) }\r\n\r\n    const [vs, sVs] = useState(false)\r\n    const [rPersons, setRPersons] = useState([])\r\n    const [newGName, setNewGName] = useState(null)\r\n    const [newGLName, setNewGLName] = useState(null)\r\n\r\n\r\n    ex = {\r\n        ...ex,\r\n        newGName, setNewGName,\r\n        newGLName, setNewGLName,\r\n        rPersons, setRPersons\r\n    }\r\n    return (\r\n        <div className={getCls('wrapper')}>\r\n            <div className={getCls('title')}>\r\n                <h2\r\n                    className={getCls('tog-ti')}\r\n                    onClick={() => { sVs(!vs) }}>\r\n                    Persons\r\n                </h2>\r\n                {vs &&\r\n                    <div className={getCls('fMWt94')}>\r\n                        <Input ex={ex} p={p} />\r\n                        <List ex={ex} p={p} />\r\n                    </div>\r\n                }\r\n\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Person\r\n","F:\\React\\Tree\\src\\Components\\branches\\new\\tags\\Tag.js",["354"],"import React, { useState, useEffect } from 'react'\r\nimport List from './List'\r\nimport Input from './Input'\r\n\r\nfunction Tag(props) {\r\n    const { p } = props\r\n    let { ex } = props\r\n    const getCls = (base) => { return p.getCls('G2WLWX-' + base) }\r\n\r\n    const [vs, sVs] = useState(false)\r\n    const [rTags, setRTags] = useState([])\r\n    const [newTName, setNewTName] = useState(null)\r\n\r\n    \r\n   ex = {...ex,\r\n    rTags, setRTags, newTName, setNewTName\r\n   }\r\n    return (\r\n        <div className={getCls('wrapper')}>\r\n            <div className={getCls('title')}>\r\n                <h2\r\n                    className={getCls('tog-ti')}\r\n                    onClick={() => { sVs(!vs) }}>\r\n                    Tags\r\n                </h2>\r\n                {vs &&\r\n                    <div className={getCls('fMWt94')}>\r\n                        <Input ex={ex} p={p} />\r\n                        <List ex={ex} p={p} />\r\n                    </div>\r\n                }\r\n\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Tag\r\n","F:\\React\\Tree\\src\\Components\\branches\\new\\groups\\List.js",["355","356"],"import { cleanup } from '@testing-library/react'\nimport React, { useState, useEffect } from 'react'\nimport { tokenGet, getSpinner } from '../../../../utils/functions'\nimport Item from './Item'\n\n\nfunction List(props) {\n    // extract the state \n    const { p } = props\n    let { ex } = props\n    const {rGroups, setRGroups} = ex\n    const getCls = (base) => { return p.getCls('Pf5uzOkS-' + base) }\n\n    // create state \n    const [loading, setLoading] = useState(true)\n\n    // get branches\n    useEffect(() => {\n        tokenGet(p.apiBase + '/group', { token: p.token })\n            .then((d) => {\n                setRGroups(d)\n                setLoading(false)\n            })\n        return () => {\n            cleanup()\n        }\n    }, [])\n\n\n    return (\n        <div className={getCls('wrapper')}>\n            {!loading &&\n                <div className={getCls('container')}>\n                    {rGroups.map((group) => (\n                        <Item p={p} ex={ex} group={group} key={group._id} />\n                    ))}\n                </div>\n            }\n            {loading && \n                getSpinner()\n            }\n        </div>\n\n    )\n}\n\n\nexport default List\n\n","F:\\React\\Tree\\src\\Components\\branches\\new\\groups\\Input.js",["357","358","359","360","361"],"import { cleanup } from '@testing-library/react'\nimport React, { useState } from 'react'\nimport { tokenPost, v2Spinner, tokenGet } from '../../../../utils/functions'\nfunction Input(props) {\n\n    const { p } = props\n    let { ex } = props\n    const getCls = (base) => { return p.getCls('pbLqqEh-' + base) }\n\n\n    const { newGName, setNewGName } = ex\n    const { rGroups, setRGroups } = ex\n    const [loading, setLoading] = useState(false)\n    const [error, setError] = useState(false)\n\n\n    \n\n\n    const newGClick = () => {\n        setLoading(true)\n        tokenPost(p.apiBase + '/group', { name: newGName }, p.token)\n            .then((d) => {\n                setLoading(false)\n            })\n    }\n\n    const handleQChange = (e) => {\n        console.log(e.target.value)\n        const groupName = e.target.value\n        // update group name\n        setNewGName(groupName)\n        // update list \n        \n    }\n\n\n    return (\n        <div className={getCls('input-section')}>\n\n            {/* info section */}\n            {error &&\n                <div className={getCls('error')}>\n                    error\n            </div>\n            }\n\n            {/* input section */}\n            <div className={getCls('input0')}>\n                <input\n                    className={getCls('input')}\n                    type=\"text\"\n                    placeholder='group name'\n                    onChange={(e) => { handleQChange(e) }} />\n            </div>\n\n\n            {/* submit section */}\n            <div\n                className={getCls('input1')}\n                onClick={newGClick}>\n                {/* new  */}\n                {!loading && <span>new</span>}\n                {/* loading spinner */}\n                {loading && v2Spinner('aOaPeclmz')}\n            </div>\n        </div>\n    )\n}\n\nexport default Input\n\n","F:\\React\\Tree\\src\\Components\\branches\\new\\persons\\List.js",["362","363"],"import { cleanup } from '@testing-library/react'\nimport React, { useState, useEffect } from 'react'\nimport { tokenGet, getSpinner } from '../../../../utils/functions'\nimport Item from './Item'\n\n\nfunction List(props) {\n    // extract the state \n    const { p } = props\n    let { ex } = props\n    const {rPersons, setRPersons} = ex\n    const getCls = (base) => { return p.getCls('Pf5uzOkS-' + base) }\n\n    // create state \n    const [loading, setLoading] = useState(false)\n\n    // get branches\n    useEffect(() => {\n        const url = p.apiBase + '/person/search?q=' + ex.newGName\n        tokenGet(url, { token: p.token })\n            .then((d) => {\n                console.log(d)\n                setRPersons(d)\n            })\n        return () => {\n            cleanup()\n        }\n    }, [ex.newGName])\n\n\n    return (\n        <div className={getCls('wrapper')}>\n            {!loading &&\n                <div className={getCls('container')}>\n                    {rPersons.map((person) => (\n                        <Item p={p} ex={ex} person={person} key={person._id} />\n                    ))}\n                </div>\n            }\n            {loading && \n                getSpinner()\n            }\n        </div>\n\n    )\n}\n\n\nexport default List\n\n","F:\\React\\Tree\\src\\Components\\branches\\new\\persons\\Input.js",["364","365","366","367","368","369"],"import React, { useState } from 'react'\nimport { tokenPost, v2Spinner, tokenGet } from '../../../../utils/functions'\nfunction Input(props) {\n\n    const { p } = props\n    let { ex } = props\n    const getCls = (base) => { return p.getCls('pbLqqEh-' + base) }\n    \n    \n    const { newGName, setNewGName , newGLName, setNewGLName} = ex\n    const {rPersons, setRPersons} = ex\n    const [loading, setLoading] = useState(false)\n    const [error, setError] = useState(false)\n\n\n    const refreshGList = () => {\n        tokenGet(p.apiBase + '/person', { token: p.token })\n            .then((d) => {\n                setRPersons(d)\n            })\n    }\n\n\n    const newGClick = () => {\n        setLoading(true)\n        tokenPost(p.apiBase + '/person', {fname: newGName, lname: newGLName}, p.token)\n        .then((d) => {\n            refreshGList()\n            setLoading(false)\n        })\n    }\n\n\n    return (\n        <div className={getCls('input-section')}>\n\n            {/* info section */}\n            {error && \n            <div className={getCls('error')}>\n                error\n            </div>\n            }\n\n            {/* input section */}\n            <div className={getCls('input0')}>\n                <input\n                    className={getCls('input')}\n                    type=\"text\"\n                    placeholder='name'\n                    onChange={(e) => { setNewGName(e.target.value) }} />\n            </div>\n\n\n            {/* submit section */}\n            <div\n                className={getCls('input1')}\n                onClick={newGClick}>\n                {/* new  */}\n                {!loading && <span>new</span>}\n                {/* loading spinner */}\n                {loading && v2Spinner('aOaPeclmz')}\n            </div>\n        </div>\n    )\n}\n\nexport default Input\n\n","F:\\React\\Tree\\src\\Components\\branches\\new\\tags\\List.js",["370","371","372"],"import { cleanup } from '@testing-library/react'\nimport React, { useState, useEffect } from 'react'\nimport { tokenGet, getSpinner } from '../../../../utils/functions'\nimport Item from './Item'\n\n\nfunction List(props) {\n    // extract the state \n    const { p } = props\n    let { ex } = props\n    const {rTags, setRTags} = ex\n    const getCls = (base) => { return p.getCls('Pf5uzOkS-' + base) }\n\n    // create state \n    const [loading, setLoading] = useState(true)\n\n    // get branches\n    useEffect(() => {\n        tokenGet(p.apiBase + '/tag', { token: p.token })\n            .then((d) => {\n                setRTags(d)\n                setLoading(false)\n            })\n        return () => {\n            cleanup()\n        }\n    }, [])\n\n\n    return (\n        <div className={getCls('wrapper')}>\n            {!loading &&\n                <div className={getCls('container')}>\n                    {rTags.map((tag) => (\n                        <Item p={p} ex={ex} tag={tag} key={tag._id} />\n                    ))}\n                </div>\n            }\n            {loading && \n                getSpinner()\n            }\n        </div>\n\n    )\n}\n\n\nexport default List\n\n","F:\\React\\Tree\\src\\Components\\branches\\new\\tags\\Input.js",["373","374","375","376"],"import React, { useState } from 'react'\nimport { tokenPost, v2Spinner, tokenGet } from '../../../../utils/functions'\nfunction Input(props) {\n\n    const { p } = props\n    let { ex } = props\n    const getCls = (base) => { return p.getCls('pbLqqEh-' + base) }\n    \n    \n    const { newTName, setNewTName} = ex\n    const {rTags, setRTags} = ex\n    const [loading, setLoading] = useState(false)\n    const [error, setError] = useState(false)\n\n\n    const refreshGList = () => {\n        tokenGet(p.apiBase + '/tag', { token: p.token })\n            .then((d) => {\n                setRTags(d)\n            })\n    }\n\n\n    const newTClick = () => {\n        setLoading(true)\n        tokenPost(p.apiBase + '/tag', {name: newTName}, p.token)\n        .then((d) => {\n            refreshGList()\n            setLoading(false)\n        })\n    }\n\n\n    return (\n        <div className={getCls('input-section')}>\n\n            {/* info section */}\n            {error && \n            <div className={getCls('error')}>\n                error\n            </div>\n            }\n\n            {/* input section */}\n            <div className={getCls('input0')}>\n                <input\n                    className={getCls('input')}\n                    type=\"text\"\n                    placeholder='tag name'\n                    onChange={(e) => { setNewTName(e.target.value) }} />\n            </div>\n\n\n            {/* submit section */}\n            <div\n                className={getCls('input1')}\n                onClick={newTClick}>\n                {/* new  */}\n                {!loading && <span>new</span>}\n                {/* loading spinner */}\n                {loading && v2Spinner('aOaPeclmz')}\n            </div>\n        </div>\n    )\n}\n\nexport default Input\n\n","F:\\React\\Tree\\src\\Components\\branches\\new\\groups\\Item.js",["377"],"import React, {useState, useEffect} from 'react'\nfunction Item(props) {\n    // extract state\n    let {ex} = props\n    const {p} = props\n    const {group} = props\n    const {seGroups, setSeGroups} = ex\n    const getCls = (base) => { return p.getCls('3u6oNHI-' + base) }\n\n    // create state \n    const [se, setSe] = useState(false)\n\n\n    const isChecked = () => {\n        const temp = seGroups.filter((d) => {\n            return d === group._id.toString()\n        })\n        console.log(temp);\n        return temp.length > 0\n    }\n\n    const toggle = () => {\n        if(isChecked()){\n            // remove item from arr\n            const t = seGroups.filter((d) => {\n                return d !== group._id\n            })\n            setSeGroups(t)\n            setSe(false)\n\n        }else{\n            // add item to arr\n            const t = seGroups\n            t.push(group._id)\n            setSeGroups(t)\n            setSe(true)\n        }\n    }\n\n    return (\n        <div className={getCls('container')} onClick={toggle}>\n            <div className={getCls('name')}>\n                {group.name}\n            </div>\n           {se && <div className={getCls('sel-icon')}>\n                <i className=\"fas fa-check\"></i>\n            </div>}\n        </div>\n    )\n}\n\nexport default Item\n\n","F:\\React\\Tree\\src\\Components\\branches\\new\\persons\\Item.js",["378","379","380"],"import React, {useState, useEffect} from 'react'\nfunction Item(props) {\n    // extract state\n    let {ex} = props\n    const {p} = props\n    const {person} = props\n    const {\n        sePersons, setSePersons,\n        rPersons, setRPersons\n    } = ex\n    const getCls = (base) => { return p.getCls('3u6oNHI-' + base) }\n\n    // create state \n    const [se, setSe] = useState(false)\n\n\n    const isChecked = () => {\n        if(!sePersons) return false\n        const temp = sePersons.filter((d) => {\n            return d === person._id.toString()\n        })\n        console.log(temp);\n        return temp.length > 0\n    }\n\n    const toggle = () => {\n        if(isChecked()){\n            // remove item from arr\n            const t = sePersons.filter((d) => {\n                return d !== person._id\n            })\n            setSePersons(t)\n            setSe(false)\n\n        }else{\n            // add item to arr\n            const t = sePersons\n            t.push(person._id)\n            setSePersons(t)\n            setSe(true)\n        }\n    }\n\n    return (\n        <div className={getCls('container')} onClick={toggle}>\n            <div className={getCls('name')}>\n                {person.fname}\n            </div>\n           {se && <div className={getCls('sel-icon')}>\n                <i className=\"fas fa-check\"></i>\n            </div>}\n        </div>\n    )\n}\n\nexport default Item\n\n","F:\\React\\Tree\\src\\Components\\branches\\new\\tags\\Item.js",["381"],"import React, {useState, useEffect} from 'react'\nfunction Item(props) {\n    // extract state\n    let {ex} = props\n    const {p} = props\n    const {tag} = props\n    const {seTags, setSeTags} = ex\n    const getCls = (base) => { return p.getCls('3u6oNHI-' + base) }\n\n    // create state \n    const [se, setSe] = useState(false)\n\n\n    const isChecked = () => {\n        const temp = seTags.filter((d) => {\n            return d === tag._id.toString()\n        })\n        console.log(temp);\n        return temp.length > 0\n    }\n\n    const toggle = () => {\n        if(isChecked()){\n            // remove item from arr\n            const t = seTags.filter((d) => {\n                return d !== tag._id\n            })\n            setSeTags(t)\n            setSe(false)\n\n        }else{\n            // add item to arr\n            const t = seTags\n            t.push(tag._id)\n            setSeTags(t)\n            setSe(true)\n        }\n    }\n\n    return (\n        <div className={getCls('container')} onClick={toggle}>\n            <div className={getCls('name')}>\n                {tag.name}\n            </div>\n           {se && <div className={getCls('sel-icon')}>\n                <i className=\"fas fa-check\"></i>\n            </div>}\n        </div>\n    )\n}\n\nexport default Item\n\n","F:\\React\\Tree\\src\\Components\\Inputs\\input1.js",[],"F:\\React\\Tree\\src\\pages\\groups\\GroupItem.js",[],"F:\\React\\Tree\\src\\pages\\groups\\Form.js",[],"F:\\React\\Tree\\src\\Components\\buttons\\Btn1.js",["382"],"/* \r\npass :\r\ntext \r\nclasses\r\nonclick\r\np\r\n*/\r\n\r\nimport React from 'react'\r\nfunction Btn1(props) {\r\n    const {p, classes, onclick, text} = props\r\n    const getCls = (base) => { return p.getCls('w9TFL-' + base) }\r\n    return (\r\n        <div className={p.getCls('btn1') + classes} onClick={onclick}>\r\n                {text}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Btn1\r\n\r\n","F:\\React\\Tree\\src\\pages\\tags\\Form.js",[],"F:\\React\\Tree\\src\\pages\\tags\\GroupItem.js",[],"F:\\React\\Tree\\src\\pages\\people\\GroupItem.js",[],"F:\\React\\Tree\\src\\pages\\people\\Form.js",[],"F:\\React\\Tree\\src\\pages\\groups\\GroupsManager.js",["383"],"/* \npage \nlist\nitem\ninput\nremove \nsave \n\n\n*/\n\n\nimport React, { useEffect, useState } from 'react'\nimport { getSpinner, tokenGet } from '../../utils/functions'\nimport GroupItem from './GroupItem'\nimport './groups.css'\nimport Form from './Form'\n\nfunction GroupsManager(props) {\n    const { p } = props\n    const getCls = (base) => { return p.getCls('uRM-' + base) }\n\n    // cerate page state > \n    const [rGroups, setRGroups] = useState([])\n    const [filter, SetFilter] = useState(null)\n    const [filteredGroups, setFilteredGroups] = useState([])\n    const [isPending, setIsPending] = useState(true)\n\n    useEffect(() => {\n        tokenGet(p.apiBase + '/group', { token: p.token }).then((d) => {\n            setRGroups(d)\n            setFilteredGroups(d)\n            setIsPending(false)\n        })\n    }, [])\n\n    let ex = {\n        rGroups, setRGroups,\n        filter, SetFilter,\n        filteredGroups, setFilteredGroups\n    }\n\n    return (\n        <div className={getCls('wrapper0')}>\n            {!isPending && <div className={getCls('wrapper')}>\n                {/* Title Section  */}\n                <div className={getCls('title')}>\n                    <h2>Groups</h2>\n                </div>\n                {/* input form */}\n                <div className={getCls('form')}>\n                    <Form p={p} ex={ex} />\n                </div>\n                {/* list */}\n                <div className={getCls('CJ')}>\n                    {filteredGroups.map(group => (\n                        <GroupItem key={group._id} p={p} group={group} />\n                    ))}\n                </div>\n            </div>}\n            {isPending && \n                <div>\n                    {getSpinner()}\n                </div>\n            }\n        </div>\n\n    )\n}\n\nexport default GroupsManager\n","F:\\React\\Tree\\src\\pages\\people\\PeopleManager.js",["384"],"/* \npage \nlist\nitem\ninput\nremove \nsave \n\n\n*/\n\n\nimport React, { useEffect, useState } from 'react'\nimport { tokenGet } from '../../utils/functions'\nimport GroupItem from './GroupItem'\nimport './people.css'\nimport Form from './Form'\n\n\n\nfunction PeopleView(props) {\n    const { p } = props\n    const getCls = (base) => { return p.getCls('uRM-' + base) }\n\n\n    // cerate page state > \n    const [rGroups, setRGroups] = useState([])\n    const [filter, SetFilter] = useState(null)\n    const [filteredPeople, setFilteredPeople] = useState([])\n\n    useEffect(() => {\n        tokenGet(p.apiBase + '/person', { token: p.token }).then((d) => {\n            setRGroups(d)\n            setFilteredPeople(d)\n            console.log(d)\n        })\n    }, [])\n\n    let ex = {\n        rGroups, setRGroups,\n        filter, SetFilter,\n        filteredPeople, setFilteredPeople\n    }\n\n    return (\n        <div className={getCls('wrapper')}>\n            {/* Title Section  */}\n            <div className={getCls('title')}>\n                <h2>People</h2>\n            </div>\n            {/* input form */}\n            <div className={getCls('form')}>\n                <Form p={p} ex={ex} />\n            </div>\n            {/* list */}\n            <div className={getCls('CJ')}>\n                {filteredPeople.map(group => (\n                    <GroupItem key={group._id} p={p} group={group} />\n                ))}\n            </div>\n        </div>\n\n    )\n}\n\nexport default PeopleView\n","F:\\React\\Tree\\src\\pages\\tags\\TagsManager.js",["385"],"/* \npage \nlist\nitem\ninput\nremove \nsave \n\n\n*/\n\n\nimport React, { useEffect, useState } from 'react'\nimport { getSpinner, tokenGet } from '../../utils/functions'\nimport GroupItem from './GroupItem'\nimport './tags.css'\nimport Form from './Form'\n\n\n\nfunction TagManager(props) {\n    const { p } = props\n    const getCls = (base) => { return p.getCls('uRM-' + base) }\n\n    // cerate page state > \n    const [rGroups, setRGroups] = useState([])\n    const [filter, SetFilter] = useState(null)\n    const [filtered, setFiltered] = useState([])\n    const [isPending, setIsPending] = useState(true)\n\n    useEffect(() => {\n        tokenGet(p.apiBase + '/tag', { token: p.token }).then((d) => {\n            setRGroups(d)\n            setFiltered(d)\n            setIsPending(false)\n            console.log(d)\n        })\n    }, [])\n\n    let ex = {\n        rGroups, setRGroups,\n        filter, SetFilter,\n        filtered, setFiltered\n    }\n\n    return (\n        <div className={getCls('wrapper0')}>\n            {!isPending &&\n                <div className={getCls('wrapper')}>\n                    {/* Title Section  */}\n                    <div className={getCls('title')}>\n                        <h2>Tags</h2>\n                    </div>\n                    {/* input form */}\n                    <div className={getCls('form')}>\n                        <Form p={p} ex={ex} />\n                    </div>\n                    {/* list */}\n                    <div className={getCls('CJ')}>\n                        {filtered.map(group => (\n                            <GroupItem key={group.name} p={p} group={group} />\n                        ))}\n                    </div>\n                </div>\n            }\n            {isPending && \n                <div className={getCls('xcKrrXdi')}>\n                    {getSpinner()}\n                </div>\n            }\n        </div>\n\n    )\n}\n\nexport default TagManager\n","F:\\React\\Tree\\src\\pages\\html\\HTMLV.js",["386","387","388","389"],"import React, { useEffect, useState } from 'react'\nimport { useParams } from 'react-router'\nimport { tokenGet } from '../../utils/functions'\nimport htmlv from './htmlv.css'\n\n\nfunction HTMLV(props) {\n    const { p } = props\n    const getCls = (base) => { return p.getCls('yFAmjB-' + base) }\n\n    const [branch, setBranch] = useState(null)\n    const [titleFontSize, setTitleFontSize] = useState(30)\n    const [fontSize, setFontSize] = useState(20)\n    const [padding, setPadding] = useState(16)\n    const [isNumbered, setIsNumbered] = useState(false)\n\n    const id = useParams().id\n    useEffect(() => {\n        // fetch branch from db \n        tokenGet(p.apiBase + '/branch?id=' + id).then((d) => {\n            setBranch(d)\n        })\n    }, [])\n\n    let counter = 0\n\n    const getTitle = () => {\n        return (\n            <h3 className={getCls('title')} >{branch.name}</h3>\n        )\n    }\n\n    const getContent = (b) => {\n        return (\n            <div key={b._id} className={getCls('cont1')} style={{ direction: 'rtl', fontSize: fontSize + 'px', paddingBottom: padding + 'px' }}>\n                {isNumbered && <span className={getCls('counter')}>{++counter}</span>}\n                <span className={getCls('name')}>{b.name}</span>\n            </div>\n        )\n    }\n\n    return (\n        <div className={getCls('wrapper0')}>\n            {/* view options */}\n            <div className={getCls('actions')}>\n                {/* large text */}\n                <span className={getCls('action')} onClick={() => {\n                    setFontSize(fontSize + 2)\n                }} >large text {fontSize}</span>\n                {/* small text */}\n                <span className={getCls('action')} onClick={() => {\n                    setFontSize(fontSize - 2)\n                }} >small text {fontSize}</span>\n                {/* large padding */}\n                <span className={getCls('action')} onClick={() => {\n                    setPadding(padding + 8)\n                }} >bigger Padding {padding}</span>\n                {/* small padding */}\n                <span className={getCls('action')} onClick={() => {\n                    setPadding(padding - 8)\n                }} >smaller Padding {padding}</span>\n                {/* show numbers     */}\n                <span className={getCls('action')} onClick={() => {\n                    setIsNumbered(!isNumbered)\n                }} ><i className=\"fas fa-sort-numeric-down\"></i></span>\n            </div>\n\n            {branch && <div className={getCls('wrapper')}>\n                {/* title */}\n                {getTitle()}\n                {/* list */}\n                {branch.children.map(b => (\n                    getContent(b)\n                ))}\n            </div>}\n        </div>\n\n    )\n}\n\n\nexport default HTMLV\n\n","F:\\React\\Tree\\src\\pages\\people\\person-view\\PersonView.js",["390","391","392","393","394","395"],"import React, { useEffect, useState } from 'react'\nimport PropTypes from 'prop-types'\nimport { Helmet } from 'react-helmet'\nimport { tokenGet, tokenPost } from '../../../utils/functions'\nimport { useParams } from 'react-router'\nimport BranchView from '../../../Components/branches/BranchView'\n\n\nfunction PersonView(props) {\n\n\n    let { ex } = props\n    const { p } = props\n    const getCls = (base) => { return p.getCls('BbJdr-' + base) }\n\n\n    const [pBranches, setPBranches] = useState([])\n    const [person, setPerson] = useState({})\n    const [isPending, setIsPending] = useState(false)\n    const [error, setError] = useState(false)\n    const [personId, setPersonId] = useState(useParams().id)\n\n    // get person\n    useEffect(() => {\n        const url = p.apiBase + '/person?id=' + personId\n        tokenGet(url, { token: p.token }).then((d) => {\n            setPerson(d)\n        })\n    }, [])\n    // get person branches\n    useEffect(() => {\n        const url = p.apiBase + '/person/branches?id=' + personId\n            tokenGet(url, { token: p.token }).then((d) => {\n                setPBranches(d)\n                setIsPending(false)\n            })\n    }, [])\n\n    /* \n    fist get the person branches from the data base . \n     then create the list for the branches. \n    \n    */\n\n    const getTitle = () => {\n        return person.fname\n    }\n\n    ex = {...ex,\n    \n    }\n\n    return (\n        <div className={getCls('wrapper0')}>\n            <div className={'wrapper'}>\n                <Helmet>\n                    <title>{getTitle()}</title>\n                </Helmet>\n            </div>\n            { pBranches &&\n                <div className={getCls('idyr0')}>\n                    <BranchView p={p} ex={ex} isDark={p.isDark} data={pBranches} apiBase={p.apiBase} setUpToDate fontSize={p.fontSize} />\n                </div>\n            }\n            { isPending && <i className=\"fas fa-spinner spinner\"></i>}\n            { error && <div> {error} </div>}\n        </div>\n    )\n}\n\nexport default PersonView\n\n","F:\\React\\Tree\\src\\pages\\groups\\single\\GroupView.js",["396","397","398","399","400","401"],"import React, { useEffect, useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Helmet } from 'react-helmet'\r\nimport { tokenGet, tokenPost } from '../../../utils/functions'\r\nimport { useParams } from 'react-router'\r\nimport BranchView from '../../../Components/branches/BranchView'\r\n\r\n\r\nfunction GroupView(props) {\r\n\r\n\r\n    let { ex } = props\r\n    const { p } = props\r\n    const getCls = (base) => { return p.getCls('BbJlkadr-' + base) }\r\n\r\n\r\n    const [pBranches, setPBranches] = useState([])\r\n    const [group, setGroup] = useState({})\r\n    const [isPending, setIsPending] = useState(false)\r\n    const [error, setError] = useState(false)\r\n    const [groupId, setGroupId] = useState(useParams().id)\r\n\r\n    // get person\r\n    useEffect(() => {\r\n        const url = p.apiBase + '/group?id=' + groupId\r\n        tokenGet(url, { token: p.token }).then((d) => {\r\n            setGroup(d)\r\n        })\r\n    }, [])\r\n    // get person branches\r\n    useEffect(() => {\r\n        const url = p.apiBase + '/group/branches?id=' + groupId\r\n            tokenGet(url, { token: p.token }).then((d) => {\r\n                setPBranches(d)\r\n                setIsPending(false)\r\n            })\r\n    }, [])\r\n\r\n    /* \r\n    fist get the person branches from the data base . \r\n     then create the list for the branches. \r\n    \r\n    */\r\n\r\n    const getTitle = () => {\r\n        return group.name\r\n    }\r\n\r\n    ex = {...ex,\r\n    \r\n    }\r\n\r\n    return (\r\n        <div className={getCls('wrapper0')}>\r\n            <div className={'wrapper'}>\r\n                <Helmet>\r\n                    <title>{getTitle()}</title>\r\n                </Helmet>\r\n            </div>\r\n            { pBranches &&\r\n                <div className={getCls('idyr0')}>\r\n                    <BranchView p={p} ex={ex} isDark={p.isDark} data={pBranches} apiBase={p.apiBase} setUpToDate fontSize={p.fontSize} />\r\n                </div>\r\n            }\r\n            { isPending && <i className=\"fas fa-spinner spinner\"></i>}\r\n            { error && <div> {error} </div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GroupView\r\n\r\n","F:\\React\\Tree\\src\\pages\\tags\\view\\TagView.js",["402","403","404","405","406","407"],"import React, { useEffect, useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Helmet } from 'react-helmet'\r\nimport { tokenGet, tokenPost } from '../../../utils/functions'\r\nimport { useParams } from 'react-router'\r\nimport BranchView from '../../../Components/branches/BranchView'\r\n\r\n\r\nfunction TagView(props) {\r\n\r\n\r\n    let { ex } = props\r\n    const { p } = props\r\n    const getCls = (base) => { return p.getCls('BbJdr-' + base) }\r\n\r\n\r\n    const [pBranches, setPBranches] = useState([])\r\n    const [tag, setTag] = useState({})\r\n    const [isPending, setIsPending] = useState(false)\r\n    const [error, setError] = useState(false)\r\n    const [tagId, setTagId] = useState(useParams().id)\r\n\r\n    // get person\r\n    useEffect(() => {\r\n        const url = p.apiBase + '/tag?id=' + tagId\r\n        tokenGet(url, { token: p.token }).then((d) => {\r\n            setTag(d)\r\n        })\r\n    }, [])\r\n    // get person branches\r\n    useEffect(() => {\r\n        const url = p.apiBase + '/tag/branches?id=' + tagId\r\n            tokenGet(url, { token: p.token }).then((d) => {\r\n                setPBranches(d)\r\n                setIsPending(false)\r\n            })\r\n    }, [])\r\n\r\n    /* \r\n    fist get the person branches from the data base . \r\n     then create the list for the branches. \r\n    \r\n    */\r\n\r\n    const getTitle = () => {\r\n        return tag.name\r\n    }\r\n\r\n    ex = {...ex,\r\n    \r\n    }\r\n\r\n    return (\r\n        <div className={getCls('wrapper0')}>\r\n            <div className={'wrapper'}>\r\n                <Helmet>\r\n                    <title>{getTitle()}</title>\r\n                </Helmet>\r\n            </div>\r\n            { pBranches &&\r\n                <div className={getCls('idyr0')}>\r\n                    <BranchView p={p} ex={ex} isDark={p.isDark} data={pBranches} apiBase={p.apiBase} setUpToDate fontSize={p.fontSize} />\r\n                </div>\r\n            }\r\n            { isPending && <i className=\"fas fa-spinner spinner\"></i>}\r\n            { error && <div> {error} </div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TagView\r\n\r\n","F:\\React\\Tree\\src\\Components\\footer\\Footer.js",[],{"ruleId":"408","replacedBy":"409"},{"ruleId":"410","replacedBy":"411"},{"ruleId":"412","severity":1,"message":"413","line":2,"column":50,"nodeType":"414","messageId":"415","endLine":2,"endColumn":59},{"ruleId":"416","severity":1,"message":"417","line":71,"column":6,"nodeType":"418","endLine":71,"endColumn":8,"suggestions":"419"},{"ruleId":"420","severity":1,"message":"421","line":76,"column":64,"nodeType":"422","messageId":"423","endLine":76,"endColumn":65},{"ruleId":"424","severity":1,"message":"425","line":76,"column":85,"nodeType":"414","messageId":"426","endLine":76,"endColumn":94},{"ruleId":"420","severity":1,"message":"421","line":77,"column":81,"nodeType":"422","messageId":"423","endLine":77,"endColumn":82},{"ruleId":"424","severity":1,"message":"425","line":77,"column":102,"nodeType":"414","messageId":"426","endLine":77,"endColumn":111},{"ruleId":"420","severity":1,"message":"421","line":78,"column":64,"nodeType":"422","messageId":"423","endLine":78,"endColumn":65},{"ruleId":"424","severity":1,"message":"425","line":78,"column":85,"nodeType":"414","messageId":"426","endLine":78,"endColumn":94},{"ruleId":"416","severity":1,"message":"427","line":42,"column":8,"nodeType":"418","endLine":42,"endColumn":13,"suggestions":"428"},{"ruleId":"412","severity":1,"message":"413","line":17,"column":16,"nodeType":"414","messageId":"415","endLine":17,"endColumn":25},{"ruleId":"412","severity":1,"message":"429","line":18,"column":17,"nodeType":"414","messageId":"415","endLine":18,"endColumn":22},{"ruleId":"412","severity":1,"message":"430","line":16,"column":12,"nodeType":"414","messageId":"415","endLine":16,"endColumn":18},{"ruleId":"412","severity":1,"message":"431","line":16,"column":20,"nodeType":"414","messageId":"415","endLine":16,"endColumn":29},{"ruleId":"416","severity":1,"message":"432","line":152,"column":8,"nodeType":"418","endLine":152,"endColumn":14,"suggestions":"433"},{"ruleId":"412","severity":1,"message":"434","line":1,"column":17,"nodeType":"414","messageId":"415","endLine":1,"endColumn":26},{"ruleId":"412","severity":1,"message":"435","line":3,"column":8,"nodeType":"414","messageId":"415","endLine":3,"endColumn":24},{"ruleId":"412","severity":1,"message":"436","line":23,"column":22,"nodeType":"414","messageId":"415","endLine":23,"endColumn":33},{"ruleId":"412","severity":1,"message":"437","line":25,"column":19,"nodeType":"414","messageId":"415","endLine":25,"endColumn":27},{"ruleId":"416","severity":1,"message":"438","line":53,"column":8,"nodeType":"418","endLine":53,"endColumn":10,"suggestions":"439"},{"ruleId":"416","severity":1,"message":"440","line":62,"column":8,"nodeType":"418","endLine":62,"endColumn":10,"suggestions":"441"},{"ruleId":"442","severity":1,"message":"443","line":68,"column":25,"nodeType":"422","messageId":"444","endLine":68,"endColumn":27},{"ruleId":"412","severity":1,"message":"445","line":72,"column":11,"nodeType":"414","messageId":"415","endLine":72,"endColumn":27},{"ruleId":"446","severity":1,"message":"447","line":193,"column":17,"nodeType":"448","endLine":193,"endColumn":204},{"ruleId":"446","severity":1,"message":"447","line":197,"column":17,"nodeType":"448","endLine":197,"endColumn":211},{"ruleId":"412","severity":1,"message":"449","line":224,"column":11,"nodeType":"414","messageId":"415","endLine":224,"endColumn":20},{"ruleId":"416","severity":1,"message":"450","line":25,"column":8,"nodeType":"418","endLine":25,"endColumn":10,"suggestions":"451"},{"ruleId":"412","severity":1,"message":"452","line":50,"column":10,"nodeType":"414","messageId":"415","endLine":50,"endColumn":19},{"ruleId":"412","severity":1,"message":"453","line":6,"column":24,"nodeType":"414","messageId":"415","endLine":6,"endColumn":32},{"ruleId":"412","severity":1,"message":"454","line":8,"column":21,"nodeType":"414","messageId":"415","endLine":8,"endColumn":31},{"ruleId":"412","severity":1,"message":"455","line":1,"column":17,"nodeType":"414","messageId":"415","endLine":1,"endColumn":25},{"ruleId":"412","severity":1,"message":"456","line":4,"column":13,"nodeType":"414","messageId":"415","endLine":4,"endColumn":17},{"ruleId":"412","severity":1,"message":"457","line":17,"column":13,"nodeType":"414","messageId":"415","endLine":17,"endColumn":21},{"ruleId":"416","severity":1,"message":"458","line":32,"column":8,"nodeType":"418","endLine":32,"endColumn":10,"suggestions":"459"},{"ruleId":"412","severity":1,"message":"460","line":8,"column":22,"nodeType":"414","messageId":"415","endLine":8,"endColumn":33},{"ruleId":"412","severity":1,"message":"455","line":1,"column":17,"nodeType":"414","messageId":"415","endLine":1,"endColumn":25},{"ruleId":"412","severity":1,"message":"461","line":7,"column":13,"nodeType":"414","messageId":"415","endLine":7,"endColumn":19},{"ruleId":"412","severity":1,"message":"462","line":7,"column":31,"nodeType":"414","messageId":"415","endLine":7,"endColumn":37},{"ruleId":"412","severity":1,"message":"463","line":4,"column":21,"nodeType":"414","messageId":"415","endLine":4,"endColumn":25},{"ruleId":"416","severity":1,"message":"464","line":37,"column":8,"nodeType":"418","endLine":37,"endColumn":10,"suggestions":"465"},{"ruleId":"412","severity":1,"message":"466","line":10,"column":12,"nodeType":"414","messageId":"415","endLine":10,"endColumn":19},{"ruleId":"412","severity":1,"message":"467","line":13,"column":20,"nodeType":"414","messageId":"415","endLine":13,"endColumn":29},{"ruleId":"468","severity":1,"message":"469","line":22,"column":46,"nodeType":"470","messageId":"471","endLine":22,"endColumn":48},{"ruleId":"416","severity":1,"message":"472","line":27,"column":8,"nodeType":"418","endLine":27,"endColumn":10,"suggestions":"473"},{"ruleId":"424","severity":1,"message":"474","line":128,"column":44,"nodeType":"414","messageId":"426","endLine":128,"endColumn":48},{"ruleId":"424","severity":1,"message":"475","line":129,"column":40,"nodeType":"414","messageId":"426","endLine":129,"endColumn":43},{"ruleId":"424","severity":1,"message":"474","line":158,"column":44,"nodeType":"414","messageId":"426","endLine":158,"endColumn":48},{"ruleId":"424","severity":1,"message":"475","line":159,"column":40,"nodeType":"414","messageId":"426","endLine":159,"endColumn":43},{"ruleId":"424","severity":1,"message":"476","line":160,"column":40,"nodeType":"414","messageId":"426","endLine":160,"endColumn":43},{"ruleId":"412","severity":1,"message":"434","line":1,"column":17,"nodeType":"414","messageId":"415","endLine":1,"endColumn":26},{"ruleId":"424","severity":1,"message":"474","line":30,"column":48,"nodeType":"414","messageId":"426","endLine":30,"endColumn":52},{"ruleId":"424","severity":1,"message":"475","line":31,"column":44,"nodeType":"414","messageId":"426","endLine":31,"endColumn":47},{"ruleId":"424","severity":1,"message":"477","line":32,"column":44,"nodeType":"414","messageId":"426","endLine":32,"endColumn":47},{"ruleId":"424","severity":1,"message":"478","line":33,"column":52,"nodeType":"414","messageId":"426","endLine":33,"endColumn":57},{"ruleId":"442","severity":1,"message":"443","line":54,"column":25,"nodeType":"422","messageId":"444","endLine":54,"endColumn":27},{"ruleId":"479","severity":1,"message":"480","line":79,"column":254,"nodeType":"481","messageId":"482","endLine":79,"endColumn":255},{"ruleId":"446","severity":1,"message":"447","line":91,"column":17,"nodeType":"448","endLine":91,"endColumn":206},{"ruleId":"446","severity":1,"message":"447","line":95,"column":17,"nodeType":"448","endLine":95,"endColumn":211},{"ruleId":"412","severity":1,"message":"483","line":6,"column":16,"nodeType":"414","messageId":"415","endLine":6,"endColumn":18},{"ruleId":"412","severity":1,"message":"483","line":5,"column":16,"nodeType":"414","messageId":"415","endLine":5,"endColumn":18},{"ruleId":"412","severity":1,"message":"484","line":31,"column":13,"nodeType":"414","messageId":"415","endLine":31,"endColumn":20},{"ruleId":"412","severity":1,"message":"485","line":1,"column":10,"nodeType":"414","messageId":"415","endLine":1,"endColumn":17},{"ruleId":"412","severity":1,"message":"434","line":2,"column":27,"nodeType":"414","messageId":"415","endLine":2,"endColumn":36},{"ruleId":"412","severity":1,"message":"434","line":1,"column":27,"nodeType":"414","messageId":"415","endLine":1,"endColumn":36},{"ruleId":"412","severity":1,"message":"434","line":1,"column":27,"nodeType":"414","messageId":"415","endLine":1,"endColumn":36},{"ruleId":"412","severity":1,"message":"486","line":15,"column":21,"nodeType":"414","messageId":"415","endLine":15,"endColumn":31},{"ruleId":"416","severity":1,"message":"487","line":28,"column":8,"nodeType":"418","endLine":28,"endColumn":21,"suggestions":"488"},{"ruleId":"412","severity":1,"message":"485","line":1,"column":10,"nodeType":"414","messageId":"415","endLine":1,"endColumn":17},{"ruleId":"412","severity":1,"message":"489","line":3,"column":32,"nodeType":"414","messageId":"415","endLine":3,"endColumn":40},{"ruleId":"412","severity":1,"message":"490","line":12,"column":13,"nodeType":"414","messageId":"415","endLine":12,"endColumn":20},{"ruleId":"412","severity":1,"message":"491","line":12,"column":22,"nodeType":"414","messageId":"415","endLine":12,"endColumn":32},{"ruleId":"412","severity":1,"message":"437","line":14,"column":19,"nodeType":"414","messageId":"415","endLine":14,"endColumn":27},{"ruleId":"412","severity":1,"message":"486","line":15,"column":21,"nodeType":"414","messageId":"415","endLine":15,"endColumn":31},{"ruleId":"416","severity":1,"message":"492","line":28,"column":8,"nodeType":"418","endLine":28,"endColumn":21,"suggestions":"493"},{"ruleId":"412","severity":1,"message":"489","line":2,"column":32,"nodeType":"414","messageId":"415","endLine":2,"endColumn":40},{"ruleId":"412","severity":1,"message":"494","line":10,"column":37,"nodeType":"414","messageId":"415","endLine":10,"endColumn":46},{"ruleId":"412","severity":1,"message":"495","line":10,"column":48,"nodeType":"414","messageId":"415","endLine":10,"endColumn":60},{"ruleId":"412","severity":1,"message":"496","line":11,"column":12,"nodeType":"414","messageId":"415","endLine":11,"endColumn":20},{"ruleId":"412","severity":1,"message":"497","line":11,"column":22,"nodeType":"414","messageId":"415","endLine":11,"endColumn":33},{"ruleId":"412","severity":1,"message":"437","line":13,"column":19,"nodeType":"414","messageId":"415","endLine":13,"endColumn":27},{"ruleId":"412","severity":1,"message":"498","line":11,"column":20,"nodeType":"414","messageId":"415","endLine":11,"endColumn":28},{"ruleId":"412","severity":1,"message":"486","line":15,"column":21,"nodeType":"414","messageId":"415","endLine":15,"endColumn":31},{"ruleId":"416","severity":1,"message":"499","line":28,"column":8,"nodeType":"418","endLine":28,"endColumn":21,"suggestions":"500"},{"ruleId":"412","severity":1,"message":"489","line":2,"column":32,"nodeType":"414","messageId":"415","endLine":2,"endColumn":40},{"ruleId":"412","severity":1,"message":"501","line":11,"column":13,"nodeType":"414","messageId":"415","endLine":11,"endColumn":18},{"ruleId":"412","severity":1,"message":"498","line":11,"column":20,"nodeType":"414","messageId":"415","endLine":11,"endColumn":28},{"ruleId":"412","severity":1,"message":"437","line":13,"column":19,"nodeType":"414","messageId":"415","endLine":13,"endColumn":27},{"ruleId":"412","severity":1,"message":"434","line":1,"column":26,"nodeType":"414","messageId":"415","endLine":1,"endColumn":35},{"ruleId":"412","severity":1,"message":"434","line":1,"column":26,"nodeType":"414","messageId":"415","endLine":1,"endColumn":35},{"ruleId":"412","severity":1,"message":"496","line":9,"column":9,"nodeType":"414","messageId":"415","endLine":9,"endColumn":17},{"ruleId":"412","severity":1,"message":"497","line":9,"column":19,"nodeType":"414","messageId":"415","endLine":9,"endColumn":30},{"ruleId":"412","severity":1,"message":"434","line":1,"column":26,"nodeType":"414","messageId":"415","endLine":1,"endColumn":35},{"ruleId":"412","severity":1,"message":"502","line":12,"column":11,"nodeType":"414","messageId":"415","endLine":12,"endColumn":17},{"ruleId":"416","severity":1,"message":"450","line":35,"column":8,"nodeType":"418","endLine":35,"endColumn":10,"suggestions":"503"},{"ruleId":"416","severity":1,"message":"450","line":37,"column":8,"nodeType":"418","endLine":37,"endColumn":10,"suggestions":"504"},{"ruleId":"416","severity":1,"message":"450","line":38,"column":8,"nodeType":"418","endLine":38,"endColumn":10,"suggestions":"505"},{"ruleId":"412","severity":1,"message":"506","line":4,"column":8,"nodeType":"414","messageId":"415","endLine":4,"endColumn":13},{"ruleId":"412","severity":1,"message":"507","line":12,"column":12,"nodeType":"414","messageId":"415","endLine":12,"endColumn":25},{"ruleId":"412","severity":1,"message":"508","line":12,"column":27,"nodeType":"414","messageId":"415","endLine":12,"endColumn":43},{"ruleId":"416","severity":1,"message":"464","line":23,"column":8,"nodeType":"418","endLine":23,"endColumn":10,"suggestions":"509"},{"ruleId":"412","severity":1,"message":"510","line":2,"column":8,"nodeType":"414","messageId":"415","endLine":2,"endColumn":17},{"ruleId":"412","severity":1,"message":"511","line":4,"column":20,"nodeType":"414","messageId":"415","endLine":4,"endColumn":29},{"ruleId":"412","severity":1,"message":"437","line":20,"column":19,"nodeType":"414","messageId":"415","endLine":20,"endColumn":27},{"ruleId":"412","severity":1,"message":"512","line":21,"column":22,"nodeType":"414","messageId":"415","endLine":21,"endColumn":33},{"ruleId":"416","severity":1,"message":"513","line":29,"column":8,"nodeType":"418","endLine":29,"endColumn":10,"suggestions":"514"},{"ruleId":"416","severity":1,"message":"513","line":37,"column":8,"nodeType":"418","endLine":37,"endColumn":10,"suggestions":"515"},{"ruleId":"412","severity":1,"message":"510","line":2,"column":8,"nodeType":"414","messageId":"415","endLine":2,"endColumn":17},{"ruleId":"412","severity":1,"message":"511","line":4,"column":20,"nodeType":"414","messageId":"415","endLine":4,"endColumn":29},{"ruleId":"412","severity":1,"message":"437","line":20,"column":19,"nodeType":"414","messageId":"415","endLine":20,"endColumn":27},{"ruleId":"412","severity":1,"message":"516","line":21,"column":21,"nodeType":"414","messageId":"415","endLine":21,"endColumn":31},{"ruleId":"416","severity":1,"message":"517","line":29,"column":8,"nodeType":"418","endLine":29,"endColumn":10,"suggestions":"518"},{"ruleId":"416","severity":1,"message":"517","line":37,"column":8,"nodeType":"418","endLine":37,"endColumn":10,"suggestions":"519"},{"ruleId":"412","severity":1,"message":"510","line":2,"column":8,"nodeType":"414","messageId":"415","endLine":2,"endColumn":17},{"ruleId":"412","severity":1,"message":"511","line":4,"column":20,"nodeType":"414","messageId":"415","endLine":4,"endColumn":29},{"ruleId":"412","severity":1,"message":"437","line":20,"column":19,"nodeType":"414","messageId":"415","endLine":20,"endColumn":27},{"ruleId":"412","severity":1,"message":"520","line":21,"column":19,"nodeType":"414","messageId":"415","endLine":21,"endColumn":27},{"ruleId":"416","severity":1,"message":"521","line":29,"column":8,"nodeType":"418","endLine":29,"endColumn":10,"suggestions":"522"},{"ruleId":"416","severity":1,"message":"521","line":37,"column":8,"nodeType":"418","endLine":37,"endColumn":10,"suggestions":"523"},"no-native-reassign",["524"],"no-negated-in-lhs",["525"],"no-unused-vars","'useParams' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'p.apiBase' and 'userController'. Either include them or remove the dependency array.","ArrayExpression",["526"],"no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","no-self-assign","'className' is assigned to itself.","selfAssignment","React Hook useEffect has a missing dependency: 'freshBranches'. Either include it or remove the dependency array.",["527"],"'date2' is defined but never used.","'resMsg' is assigned a value but never used.","'setResMsg' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'p.apiBase'. Either include it or remove the dependency array.",["528"],"'useEffect' is defined but never used.","'ReactAudioPlayer' is defined but never used.","'setOldBName' is assigned a value but never used.","'setError' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'branch.groups', 'p.apiBase', and 'p.token'. Either include them or remove the dependency array.",["529"],"React Hook useEffect has missing dependencies: 'branch.persons', 'p.apiBase', and 'p.token'. Either include them or remove the dependency array.",["530"],"eqeqeq","Expected '===' and instead saw '=='.","unexpected","'handleBranchEdit' is assigned a value but never used.","jsx-a11y/iframe-has-title","<iframe> elements must have a unique title property.","JSXOpeningElement","'getEWidth' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'p.apiBase' and 'p.token'. Either include them or remove the dependency array.",["531"],"'getRandId' is defined but never used.","'position' is assigned a value but never used.","'setOldName' is assigned a value but never used.","'useState' is defined but never used.","'lang' is assigned a value but never used.","'fontSize' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'props.p.token' and 'url'. Either include them or remove the dependency array.",["532"],"'setLocation' is assigned a value but never used.","'branch' is assigned a value but never used.","'isDate' is assigned a value but never used.","'Link' is defined but never used.","React Hook useEffect has missing dependencies: 'id' and 'p.apiBase'. Either include them or remove the dependency array.",["533"],"'loading' is assigned a value but never used.","'setBranch' is assigned a value but never used.","array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","React Hook useEffect has missing dependencies: 'branch._id' and 'data.branches'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setChildren' needs the current value of 'branch._id'.",["534"],"'hour' is assigned to itself.","'min' is assigned to itself.","'sec' is assigned to itself.","'day' is assigned to itself.","'month' is assigned to itself.","no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression","'ex' is assigned a value but never used.","'counter' is assigned a value but never used.","'cleanup' is defined but never used.","'setLoading' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'p.apiBase', 'p.token', and 'setRGroups'. Either include them or remove the dependency array.",["535"],"'tokenGet' is defined but never used.","'rGroups' is assigned a value but never used.","'setRGroups' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'p.apiBase', 'p.token', and 'setRPersons'. Either include them or remove the dependency array.",["536"],"'newGFName' is assigned a value but never used.","'setNewGLName' is assigned a value but never used.","'rPersons' is assigned a value but never used.","'setRPersons' is assigned a value but never used.","'setRTags' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'ex', 'p.apiBase', and 'p.token'. Either include them or remove the dependency array.",["537"],"'rTags' is assigned a value but never used.","'getCls' is assigned a value but never used.",["538"],["539"],["540"],"'htmlv' is defined but never used.","'titleFontSize' is assigned a value but never used.","'setTitleFontSize' is assigned a value but never used.",["541"],"'PropTypes' is defined but never used.","'tokenPost' is defined but never used.","'setPersonId' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'p.apiBase', 'p.token', and 'personId'. Either include them or remove the dependency array.",["542"],["543"],"'setGroupId' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'groupId', 'p.apiBase', and 'p.token'. Either include them or remove the dependency array.",["544"],["545"],"'setTagId' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'p.apiBase', 'p.token', and 'tagId'. Either include them or remove the dependency array.",["546"],["547"],"no-global-assign","no-unsafe-negation",{"desc":"548","fix":"549"},{"desc":"550","fix":"551"},{"desc":"552","fix":"553"},{"desc":"554","fix":"555"},{"desc":"556","fix":"557"},{"desc":"558","fix":"559"},{"desc":"560","fix":"561"},{"desc":"562","fix":"563"},{"desc":"564","fix":"565"},{"desc":"566","fix":"567"},{"desc":"568","fix":"569"},{"desc":"570","fix":"571"},{"desc":"558","fix":"572"},{"desc":"558","fix":"573"},{"desc":"558","fix":"574"},{"desc":"562","fix":"575"},{"desc":"576","fix":"577"},{"desc":"576","fix":"578"},{"desc":"579","fix":"580"},{"desc":"579","fix":"581"},{"desc":"582","fix":"583"},{"desc":"582","fix":"584"},"Update the dependencies array to be: [p.apiBase, userController]",{"range":"585","text":"586"},"Update the dependencies array to be: [freshBranches, url]",{"range":"587","text":"588"},"Update the dependencies array to be: [data, p.apiBase]",{"range":"589","text":"590"},"Update the dependencies array to be: [branch.groups, p.apiBase, p.token]",{"range":"591","text":"592"},"Update the dependencies array to be: [branch.persons, p.apiBase, p.token]",{"range":"593","text":"594"},"Update the dependencies array to be: [p.apiBase, p.token]",{"range":"595","text":"596"},"Update the dependencies array to be: [props.p.token, url]",{"range":"597","text":"598"},"Update the dependencies array to be: [id, p.apiBase]",{"range":"599","text":"600"},"Update the dependencies array to be: [branch._id, data.branches]",{"range":"601","text":"602"},"Update the dependencies array to be: [ex.newGName, p.apiBase, p.token, setRGroups]",{"range":"603","text":"604"},"Update the dependencies array to be: [ex.newGName, p.apiBase, p.token, setRPersons]",{"range":"605","text":"606"},"Update the dependencies array to be: [ex, ex.newTName, p.apiBase, p.token]",{"range":"607","text":"608"},{"range":"609","text":"596"},{"range":"610","text":"596"},{"range":"611","text":"596"},{"range":"612","text":"600"},"Update the dependencies array to be: [p.apiBase, p.token, personId]",{"range":"613","text":"614"},{"range":"615","text":"614"},"Update the dependencies array to be: [groupId, p.apiBase, p.token]",{"range":"616","text":"617"},{"range":"618","text":"617"},"Update the dependencies array to be: [p.apiBase, p.token, tagId]",{"range":"619","text":"620"},{"range":"621","text":"620"},[2758,2760],"[p.apiBase, userController]",[1214,1219],"[freshBranches, url]",[5111,5117],"[data, p.apiBase]",[2208,2210],"[branch.groups, p.apiBase, p.token]",[2438,2440],"[branch.persons, p.apiBase, p.token]",[873,875],"[p.apiBase, p.token]",[1064,1066],"[props.p.token, url]",[998,1000],"[id, p.apiBase]",[761,763],"[branch._id, data.branches]",[767,780],"[ex.newGName, p.apiBase, p.token, setRGroups]",[788,801],"[ex.newGName, p.apiBase, p.token, setRPersons]",[781,794],"[ex, ex.newTName, p.apiBase, p.token]",[806,808],[806,808],[810,812],[763,765],[923,925],"[p.apiBase, p.token, personId]",[1200,1202],[918,920],"[groupId, p.apiBase, p.token]",[1193,1195],[899,901],"[p.apiBase, p.token, tagId]",[1170,1172]]