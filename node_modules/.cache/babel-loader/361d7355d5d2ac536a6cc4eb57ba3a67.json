{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"F:\\\\React\\\\tree-mysql\\\\src\\\\Components\\\\branches\\\\new\\\\groups\\\\List.js\",\n    _s = $RefreshSig$();\n\nimport { cleanup } from '@testing-library/react';\nimport React, { useState, useEffect } from 'react';\nimport { tokenGet, getSpinner } from '../../../../utils/functions';\nimport Item from './Item';\n\nfunction List(props) {\n  _s();\n\n  // extract the state \n  const {\n    p\n  } = props;\n  let {\n    ex\n  } = props;\n  const {\n    rGroups,\n    setRGroups\n  } = ex;\n\n  const getCls = base => {\n    return p.getCls('Pf5uzOkS-' + base);\n  }; // create state \n\n\n  const [loading, setLoading] = useState(false);\n  useEffect(() => {\n    let url;\n    if (ex.newGName) url = p.apiBase2 + '/groups/search?q=' + ex.newGName;else url = p.apiBase2 + '/groups/search?q=';\n    tokenGet(url, {\n      Authorization: p.token\n    }).then(d => {\n      setRGroups(d);\n    });\n    return () => {\n      cleanup();\n    };\n  }, [ex.newGName]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: getCls('wrapper'),\n    children: [!loading && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: getCls('container'),\n      children: rGroups.map(group => /*#__PURE__*/_jsxDEV(Item, {\n        p: p,\n        ex: ex,\n        group: group\n      }, group.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 25\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 17\n    }, this), loading && getSpinner()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 9\n  }, this);\n}\n\n_s(List, \"bp7W7BLZaxNmS0ceaCBH82+KoGQ=\");\n\n_c = List;\nexport default List;\n\nvar _c;\n\n$RefreshReg$(_c, \"List\");","map":{"version":3,"sources":["F:/React/tree-mysql/src/Components/branches/new/groups/List.js"],"names":["cleanup","React","useState","useEffect","tokenGet","getSpinner","Item","List","props","p","ex","rGroups","setRGroups","getCls","base","loading","setLoading","url","newGName","apiBase2","Authorization","token","then","d","map","group","id"],"mappings":";;;;;AAAA,SAASA,OAAT,QAAwB,wBAAxB;AACA,OAAOC,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,QAAT,EAAmBC,UAAnB,QAAqC,6BAArC;AACA,OAAOC,IAAP,MAAiB,QAAjB;;AAGA,SAASC,IAAT,CAAcC,KAAd,EAAqB;AAAA;;AACjB;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAQD,KAAd;AACA,MAAI;AAAEE,IAAAA;AAAF,MAASF,KAAb;AACA,QAAM;AAAEG,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAA0BF,EAAhC;;AACA,QAAMG,MAAM,GAAIC,IAAD,IAAU;AAAE,WAAOL,CAAC,CAACI,MAAF,CAAS,cAAcC,IAAvB,CAAP;AAAqC,GAAhE,CALiB,CAOjB;;;AACA,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBd,QAAQ,CAAC,KAAD,CAAtC;AAGAC,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIc,GAAJ;AACA,QAAGP,EAAE,CAACQ,QAAN,EACAD,GAAG,GAAGR,CAAC,CAACU,QAAF,GAAa,mBAAb,GAAmCT,EAAE,CAACQ,QAA5C,CADA,KAEKD,GAAG,GAAGR,CAAC,CAACU,QAAF,GAAa,mBAAnB;AACLf,IAAAA,QAAQ,CAACa,GAAD,EAAM;AAAEG,MAAAA,aAAa,EAAEX,CAAC,CAACY;AAAnB,KAAN,CAAR,CACKC,IADL,CACWC,CAAD,IAAO;AACTX,MAAAA,UAAU,CAACW,CAAD,CAAV;AACH,KAHL;AAIA,WAAO,MAAM;AACTvB,MAAAA,OAAO;AACV,KAFD;AAGH,GAZQ,EAYN,CAACU,EAAE,CAACQ,QAAJ,CAZM,CAAT;AAcA,sBACI;AAAK,IAAA,SAAS,EAAEL,MAAM,CAAC,SAAD,CAAtB;AAAA,eACK,CAACE,OAAD,iBACG;AAAK,MAAA,SAAS,EAAEF,MAAM,CAAC,WAAD,CAAtB;AAAA,gBACKF,OAAO,CAACa,GAAR,CAAaC,KAAD,iBACT,QAAC,IAAD;AAAM,QAAA,CAAC,EAAEhB,CAAT;AAAY,QAAA,EAAE,EAAEC,EAAhB;AAAoB,QAAA,KAAK,EAAEe;AAA3B,SAAuCA,KAAK,CAACC,EAA7C;AAAA;AAAA;AAAA;AAAA,cADH;AADL;AAAA;AAAA;AAAA;AAAA,YAFR,EAQKX,OAAO,IACJV,UAAU,EATlB;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAeH;;GAxCQE,I;;KAAAA,I;AA2CT,eAAeA,IAAf","sourcesContent":["import { cleanup } from '@testing-library/react'\nimport React, { useState, useEffect } from 'react'\nimport { tokenGet, getSpinner } from '../../../../utils/functions'\nimport Item from './Item'\n\n\nfunction List(props) {\n    // extract the state \n    const { p } = props\n    let { ex } = props\n    const { rGroups, setRGroups } = ex\n    const getCls = (base) => { return p.getCls('Pf5uzOkS-' + base) }\n\n    // create state \n    const [loading, setLoading] = useState(false)\n\n\n    useEffect(() => {\n        let url\n        if(ex.newGName)\n        url = p.apiBase2 + '/groups/search?q=' + ex.newGName\n        else url = p.apiBase2 + '/groups/search?q='\n        tokenGet(url, { Authorization: p.token })\n            .then((d) => {\n                setRGroups(d)\n            })\n        return () => {\n            cleanup()\n        }\n    }, [ex.newGName])\n\n    return (\n        <div className={getCls('wrapper')}>\n            {!loading &&\n                <div className={getCls('container')}>\n                    {rGroups.map((group) => (\n                        <Item p={p} ex={ex} group={group} key={group.id} />\n                    ))}\n                </div>\n            }\n            {loading &&\n                getSpinner()\n            }\n        </div>\n\n    )\n}\n\n\nexport default List\n\n"]},"metadata":{},"sourceType":"module"}