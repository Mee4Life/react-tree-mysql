{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"F:\\\\React\\\\tree-mysql\\\\src\\\\Components\\\\branches\\\\edit\\\\Edit.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport '../new/new.css';\n\nfunction Edit(props) {\n  _s();\n\n  let {\n    location,\n    isDark,\n    apiBase,\n    setUpToDate,\n    branch,\n    setEdit\n  } = props;\n  const [newBranchPending, setNewBranchPending] = useState(false);\n  const [branchName, setBranchName] = useState('');\n  const [linkName, setLinkName] = useState('');\n  const [oldName, setOldName] = useState(branch.name);\n  const [oldLinkName, setOldLinkName] = useState(branch.extra && branch.extra.name ? branch.extra.name : branch.name);\n  const [branchType, setBranchType] = useState(branch.type);\n  if (!location) location = '';\n\n  const submitClick = () => {\n    setNewBranchPending(true);\n    const url = apiBase + '/branch';\n    const data = {\n      id: branch._id,\n      name: branchName,\n      type: branchType,\n      origin: location\n    };\n\n    if (branchType === 'link') {\n      data['extra'] ? branchType = 'link' : data['extra'] = {};\n      data['extra']['name'] = linkName;\n    }\n\n    postData(url, data).then(res => {\n      setNewBranchPending(false); // fetch new branches . \n\n      let url;\n      location.length > 0 ? url = apiBase + '/branch?id=' + location : url = apiBase + '/branch';\n      fetch(url).then(d => {\n        return d.json();\n      }).then(e => {\n        if (location.length > 0) setUpToDate(e);else {\n          // extract root branches : \n          // extract root branches : \n          const rootBranches = e.filter(b => {\n            return b.origin == null;\n          });\n          setUpToDate(rootBranches);\n        }\n        setBranchType('text');\n        setEdit(false);\n      });\n    });\n  };\n\n  async function postData(url = '', data = {}) {\n    // Default options are marked with *\n    const response = await fetch(url, {\n      method: 'PATCH',\n      // *GET, POST, PUT, DELETE, etc.\n      mode: 'cors',\n      // no-cors, *cors, same-origin\n      cache: 'no-cache',\n      // *default, no-cache, reload, force-cache, only-if-cached\n      credentials: 'same-origin',\n      // include, *same-origin, omit\n      headers: {\n        'Content-Type': 'application/json' // 'Content-Type': 'application/x-www-form-urlencoded',\n\n      },\n      redirect: 'follow',\n      // manual, *follow, error\n      referrerPolicy: 'no-referrer',\n      // no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url\n      body: JSON.stringify(data) // body data type must match \"Content-Type\" header\n\n    });\n    return response.json(); // parses JSON response into native JavaScript objects\n  }\n\n  const handleNameChange = e => {\n    setBranchName(e.target.innerText);\n  };\n\n  const handleLinkNameChange = e => {\n    setLinkName(e.target.innerText);\n  };\n\n  const branchTypeChange = e => {\n    setBranchType(e.target.value);\n  };\n\n  const getSelectBranchType = () => {\n    return /*#__PURE__*/_jsxDEV(\"select\", {\n      className: \"select-branch-type\",\n      name: \"type\",\n      onChange: e => {\n        branchTypeChange(e);\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: branchType,\n        selected: \"true\",\n        children: branchType\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"text\",\n        children: \"text\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"image\",\n        children: \"image\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"link\",\n        children: \"link\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"gist\",\n        children: \"gist\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"sound\",\n        children: \"sound\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"youtube\",\n        children: \"youtube\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"video\",\n        children: \"video\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }, this);\n  };\n\n  const getEditLinkForm = () => {\n    const form = /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"new-branch-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Edit Link\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        contentEditable: \"true\",\n        id: \"branchName\",\n        className: \"input-name\",\n        onInput: e => handleNameChange(e),\n        children: [\" \", oldName, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        contentEditable: \"true\",\n        className: \"input-name\",\n        onInput: e => handleLinkNameChange(e),\n        children: [\" \", oldLinkName, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        onClick: () => {\n          setEdit(false);\n        },\n        className: `save-branch-btn ${isDark ? \"cancel-edit-branch-dark\" : \"cancel-edit-branch-light\"}`,\n        children: \"cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 17\n      }, this), getSelectBranchType(), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        onClick: submitClick,\n        className: `save-branch-btn ${isDark ? \"save-branch-dark\" : \"save-branch-light\"}`,\n        children: \"Save\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 14\n    }, this);\n\n    return form;\n  };\n\n  const getInputForm = () => {\n    let form = /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"new-branch-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Edit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        contentEditable: \"true\",\n        id: \"branchName\",\n        className: \"input-name\",\n        onInput: e => handleNameChange(e),\n        children: [\" \", oldName, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 17\n      }, this), getSelectBranchType(), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        onClick: submitClick,\n        className: `save-branch-btn ${isDark ? \"save-branch-dark\" : \"save-branch-light\"}`,\n        children: \"Save\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 14\n    }, this);\n\n    if (branchType === 'link') {\n      form = getEditLinkForm();\n    }\n\n    return form;\n  };\n\n  const getSpinner = e => {\n    return /*#__PURE__*/_jsxDEV(\"i\", {\n      className: \"fas fa-spinner spinner save-branch-spinner\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 13\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `form-container ${isDark ? \"dark-form-container\" : \"light-form-container\"}`,\n    children: [!newBranchPending && getInputForm(), newBranchPending && getSpinner()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 144,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Edit, \"nhHAFPH/uuS0lE6HkYYTvhp4vsA=\");\n\n_c = Edit;\nexport default Edit;\n\nvar _c;\n\n$RefreshReg$(_c, \"Edit\");","map":{"version":3,"sources":["F:/React/tree-mysql/src/Components/branches/edit/Edit.js"],"names":["React","useState","Edit","props","location","isDark","apiBase","setUpToDate","branch","setEdit","newBranchPending","setNewBranchPending","branchName","setBranchName","linkName","setLinkName","oldName","setOldName","name","oldLinkName","setOldLinkName","extra","branchType","setBranchType","type","submitClick","url","data","id","_id","origin","postData","then","res","length","fetch","d","json","e","rootBranches","filter","b","response","method","mode","cache","credentials","headers","redirect","referrerPolicy","body","JSON","stringify","handleNameChange","target","innerText","handleLinkNameChange","branchTypeChange","value","getSelectBranchType","getEditLinkForm","form","getInputForm","getSpinner"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport '../new/new.css'\n\nfunction Edit(props) {\n    let { location, isDark, apiBase, setUpToDate, branch, setEdit } = props\n    const [newBranchPending, setNewBranchPending] = useState(false)\n    const [branchName, setBranchName] = useState('')\n    const [linkName, setLinkName] = useState('')\n    const [oldName, setOldName] = useState(branch.name)\n    const [oldLinkName, setOldLinkName] = useState(\n        branch.extra && branch.extra.name ? branch.extra.name : branch.name\n    )\n    const [branchType, setBranchType] = useState(branch.type)\n    if (!location) location = ''\n\n\n\n    const submitClick = () => {\n        setNewBranchPending(true)\n        const url = apiBase + '/branch'\n        const data = {\n            id: branch._id,\n            name: branchName,\n            type: branchType,\n            origin: location\n        }\n\n        if(branchType === 'link'){\n            data['extra'] ?  branchType = 'link' : data['extra'] = {}\n            data['extra']['name'] = linkName\n        }\n\n        postData(url, data).then(res => {\n            setNewBranchPending(false)\n\n            // fetch new branches . \n            let url\n            location.length > 0 ? url = apiBase + '/branch?id=' + location : url = apiBase + '/branch'\n            fetch(url).then(d => {\n                return d.json()\n            }).then(e => {\n                if (location.length > 0)\n                    setUpToDate(e)\n                else {\n                    // extract root branches : \n                    // extract root branches : \n                    const rootBranches = e.filter((b) => {\n                        return b.origin == null\n                    })\n                    setUpToDate(rootBranches)\n\n                }\n                setBranchType('text')\n                setEdit(false)\n            })\n\n        })\n    }\n\n    async function postData(url = '', data = {}) {\n        // Default options are marked with *\n        const response = await fetch(url, {\n            method: 'PATCH', // *GET, POST, PUT, DELETE, etc.\n            mode: 'cors', // no-cors, *cors, same-origin\n            cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n            credentials: 'same-origin', // include, *same-origin, omit\n            headers: {\n                'Content-Type': 'application/json'\n                // 'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            redirect: 'follow', // manual, *follow, error\n            referrerPolicy: 'no-referrer', // no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url\n            body: JSON.stringify(data) // body data type must match \"Content-Type\" header\n        });\n        return response.json(); // parses JSON response into native JavaScript objects\n    }\n\n    const handleNameChange = (e) => {\n        setBranchName(e.target.innerText)\n    }\n    const handleLinkNameChange = (e) => {\n        setLinkName(e.target.innerText)\n    }\n\n    \n\n    const branchTypeChange = (e) => {\n        setBranchType(e.target.value)\n    }\n\n\n    const getSelectBranchType = () => {\n        return (\n            <select className=\"select-branch-type\" name=\"type\" onChange={(e) => {\n                branchTypeChange(e)\n            }}>\n                <option value={branchType} selected=\"true\">{branchType}</option>\n                <option value=\"text\">text</option>\n                <option value=\"image\">image</option>\n                <option value=\"link\">link</option>\n                <option value=\"gist\">gist</option>\n                <option value=\"sound\">sound</option>\n                <option value=\"youtube\">youtube</option>\n                <option value=\"video\">video</option>\n            </select>\n        )\n    }\n\n\n    const getEditLinkForm = () => {\n        const form =\n            (<div className=\"new-branch-form\">\n                <h2>Edit Link</h2>\n                <div contentEditable=\"true\" id=\"branchName\" className=\"input-name\" onInput={(e) => handleNameChange(e)}> {oldName} </div>\n                <div contentEditable=\"true\" className=\"input-name\" onInput={(e) => handleLinkNameChange(e)}> {oldLinkName} </div>\n                <button type=\"submit\" onClick={() => {setEdit(false)}} className={`save-branch-btn ${isDark ? \"cancel-edit-branch-dark\" : \"cancel-edit-branch-light\"}`}>cancel</button>\n                {getSelectBranchType()}\n                <button type=\"submit\" onClick={submitClick} className={`save-branch-btn ${isDark ? \"save-branch-dark\" : \"save-branch-light\"}`}>Save</button>\n            </div>)\n            return form\n    }\n\n    const getInputForm = () => {\n        let form =\n            (<div className=\"new-branch-form\">\n                <h2>Edit</h2>\n                <div contentEditable=\"true\" id=\"branchName\" className=\"input-name\" onInput={(e) => handleNameChange(e)}> {oldName} </div>\n                {getSelectBranchType()}\n                <button type=\"submit\" onClick={submitClick} className={`save-branch-btn ${isDark ? \"save-branch-dark\" : \"save-branch-light\"}`}>Save</button>\n            </div>)\n        if (branchType === 'link') {\n            form = getEditLinkForm()\n        }\n        return form\n    }\n\n    const getSpinner = (e) => {\n        return (\n            <i className=\"fas fa-spinner spinner save-branch-spinner\"></i>\n        )\n    }\n\n    return (\n        <div className={`form-container ${isDark ? \"dark-form-container\" : \"light-form-container\"}`}>\n            {!newBranchPending && getInputForm()}\n            {newBranchPending && getSpinner()}\n        </div>\n    )\n}\n\nexport default Edit\n"]},"metadata":{},"sourceType":"module"}