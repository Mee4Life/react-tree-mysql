{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"F:\\\\React\\\\tree-mysql\\\\src\\\\pages\\\\groups\\\\single\\\\GroupView.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Helmet } from 'react-helmet';\nimport { tokenGet, tokenPost } from '../../../utils/functions';\nimport { useParams } from 'react-router';\nimport BranchView from '../../../Components/branches/BranchView';\n\nfunction GroupView(props) {\n  _s();\n\n  let {\n    ex\n  } = props;\n  const {\n    p\n  } = props;\n\n  const getCls = base => {\n    return p.getCls('BbJlkadr-' + base);\n  };\n\n  const [pBranches, setPBranches] = useState([]);\n  const [group, setGroup] = useState({});\n  const [isPending, setIsPending] = useState(false);\n  const [error, setError] = useState(false);\n  const [groupId, setGroupId] = useState(useParams().id); // get person\n\n  useEffect(() => {\n    const url = p.apiBase + '/group?id=' + groupId;\n    tokenGet(url, {\n      token: p.token\n    }).then(d => {\n      setGroup(d);\n    });\n  }, []); // get person branches\n\n  useEffect(() => {\n    const url = p.apiBase + '/group/branches?id=' + groupId;\n    tokenGet(url, {\n      token: p.token\n    }).then(d => {\n      setPBranches(d);\n      setIsPending(false);\n    });\n  }, []);\n  /* \n  fist get the person branches from the data base . \n   then create the list for the branches. \n  \n  */\n\n  const getTitle = () => {\n    return group.name;\n  };\n\n  ex = { ...ex\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: getCls('wrapper0'),\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: 'wrapper',\n      children: /*#__PURE__*/_jsxDEV(Helmet, {\n        children: /*#__PURE__*/_jsxDEV(\"title\", {\n          children: getTitle()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this), pBranches && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: getCls('idyr0'),\n      children: /*#__PURE__*/_jsxDEV(BranchView, {\n        p: p,\n        ex: ex,\n        isDark: p.isDark,\n        data: pBranches,\n        apiBase: p.apiBase,\n        setUpToDate: true,\n        fontSize: p.fontSize\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 17\n    }, this), isPending && /*#__PURE__*/_jsxDEV(\"i\", {\n      className: \"fas fa-spinner spinner\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 28\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\" \", error, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 24\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 9\n  }, this);\n}\n\n_s(GroupView, \"g7hP8LcpesyOgn8l3WRMhIYWzpA=\", false, function () {\n  return [useParams];\n});\n\n_c = GroupView;\nexport default GroupView;\n\nvar _c;\n\n$RefreshReg$(_c, \"GroupView\");","map":{"version":3,"sources":["F:/React/tree-mysql/src/pages/groups/single/GroupView.js"],"names":["React","useEffect","useState","PropTypes","Helmet","tokenGet","tokenPost","useParams","BranchView","GroupView","props","ex","p","getCls","base","pBranches","setPBranches","group","setGroup","isPending","setIsPending","error","setError","groupId","setGroupId","id","url","apiBase","token","then","d","getTitle","name","isDark","fontSize"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,MAAT,QAAuB,cAAvB;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,0BAApC;AACA,SAASC,SAAT,QAA0B,cAA1B;AACA,OAAOC,UAAP,MAAuB,yCAAvB;;AAGA,SAASC,SAAT,CAAmBC,KAAnB,EAA0B;AAAA;;AAGtB,MAAI;AAAEC,IAAAA;AAAF,MAASD,KAAb;AACA,QAAM;AAAEE,IAAAA;AAAF,MAAQF,KAAd;;AACA,QAAMG,MAAM,GAAIC,IAAD,IAAU;AAAE,WAAOF,CAAC,CAACC,MAAF,CAAS,cAAcC,IAAvB,CAAP;AAAqC,GAAhE;;AAGA,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4Bd,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAM,CAACe,KAAD,EAAQC,QAAR,IAAoBhB,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACiB,SAAD,EAAYC,YAAZ,IAA4BlB,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACmB,KAAD,EAAQC,QAAR,IAAoBpB,QAAQ,CAAC,KAAD,CAAlC;AACA,QAAM,CAACqB,OAAD,EAAUC,UAAV,IAAwBtB,QAAQ,CAACK,SAAS,GAAGkB,EAAb,CAAtC,CAZsB,CActB;;AACAxB,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMyB,GAAG,GAAGd,CAAC,CAACe,OAAF,GAAY,YAAZ,GAA2BJ,OAAvC;AACAlB,IAAAA,QAAQ,CAACqB,GAAD,EAAM;AAAEE,MAAAA,KAAK,EAAEhB,CAAC,CAACgB;AAAX,KAAN,CAAR,CAAkCC,IAAlC,CAAwCC,CAAD,IAAO;AAC1CZ,MAAAA,QAAQ,CAACY,CAAD,CAAR;AACH,KAFD;AAGH,GALQ,EAKN,EALM,CAAT,CAfsB,CAqBtB;;AACA7B,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMyB,GAAG,GAAGd,CAAC,CAACe,OAAF,GAAY,qBAAZ,GAAoCJ,OAAhD;AACIlB,IAAAA,QAAQ,CAACqB,GAAD,EAAM;AAAEE,MAAAA,KAAK,EAAEhB,CAAC,CAACgB;AAAX,KAAN,CAAR,CAAkCC,IAAlC,CAAwCC,CAAD,IAAO;AAC1Cd,MAAAA,YAAY,CAACc,CAAD,CAAZ;AACAV,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACH,KAHD;AAIP,GANQ,EAMN,EANM,CAAT;AAQA;AACJ;AACA;AACA;AACA;;AAEI,QAAMW,QAAQ,GAAG,MAAM;AACnB,WAAOd,KAAK,CAACe,IAAb;AACH,GAFD;;AAIArB,EAAAA,EAAE,GAAG,EAAC,GAAGA;AAAJ,GAAL;AAIA,sBACI;AAAK,IAAA,SAAS,EAAEE,MAAM,CAAC,UAAD,CAAtB;AAAA,4BACI;AAAK,MAAA,SAAS,EAAE,SAAhB;AAAA,6BACI,QAAC,MAAD;AAAA,+BACI;AAAA,oBAAQkB,QAAQ;AAAhB;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADJ,EAMMhB,SAAS,iBACP;AAAK,MAAA,SAAS,EAAEF,MAAM,CAAC,OAAD,CAAtB;AAAA,6BACI,QAAC,UAAD;AAAY,QAAA,CAAC,EAAED,CAAf;AAAkB,QAAA,EAAE,EAAED,EAAtB;AAA0B,QAAA,MAAM,EAAEC,CAAC,CAACqB,MAApC;AAA4C,QAAA,IAAI,EAAElB,SAAlD;AAA6D,QAAA,OAAO,EAAEH,CAAC,CAACe,OAAxE;AAAiF,QAAA,WAAW,MAA5F;AAA6F,QAAA,QAAQ,EAAEf,CAAC,CAACsB;AAAzG;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YAPR,EAWMf,SAAS,iBAAI;AAAG,MAAA,SAAS,EAAC;AAAb;AAAA;AAAA;AAAA;AAAA,YAXnB,EAYME,KAAK,iBAAI;AAAA,sBAAOA,KAAP;AAAA;AAAA;AAAA;AAAA;AAAA,YAZf;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAgBH;;GA5DQZ,S;UAYkCF,S;;;KAZlCE,S;AA8DT,eAAeA,SAAf","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport PropTypes from 'prop-types'\nimport { Helmet } from 'react-helmet'\nimport { tokenGet, tokenPost } from '../../../utils/functions'\nimport { useParams } from 'react-router'\nimport BranchView from '../../../Components/branches/BranchView'\n\n\nfunction GroupView(props) {\n\n\n    let { ex } = props\n    const { p } = props\n    const getCls = (base) => { return p.getCls('BbJlkadr-' + base) }\n\n\n    const [pBranches, setPBranches] = useState([])\n    const [group, setGroup] = useState({})\n    const [isPending, setIsPending] = useState(false)\n    const [error, setError] = useState(false)\n    const [groupId, setGroupId] = useState(useParams().id)\n\n    // get person\n    useEffect(() => {\n        const url = p.apiBase + '/group?id=' + groupId\n        tokenGet(url, { token: p.token }).then((d) => {\n            setGroup(d)\n        })\n    }, [])\n    // get person branches\n    useEffect(() => {\n        const url = p.apiBase + '/group/branches?id=' + groupId\n            tokenGet(url, { token: p.token }).then((d) => {\n                setPBranches(d)\n                setIsPending(false)\n            })\n    }, [])\n\n    /* \n    fist get the person branches from the data base . \n     then create the list for the branches. \n    \n    */\n\n    const getTitle = () => {\n        return group.name\n    }\n\n    ex = {...ex,\n    \n    }\n\n    return (\n        <div className={getCls('wrapper0')}>\n            <div className={'wrapper'}>\n                <Helmet>\n                    <title>{getTitle()}</title>\n                </Helmet>\n            </div>\n            { pBranches &&\n                <div className={getCls('idyr0')}>\n                    <BranchView p={p} ex={ex} isDark={p.isDark} data={pBranches} apiBase={p.apiBase} setUpToDate fontSize={p.fontSize} />\n                </div>\n            }\n            { isPending && <i className=\"fas fa-spinner spinner\"></i>}\n            { error && <div> {error} </div>}\n        </div>\n    )\n}\n\nexport default GroupView\n\n"]},"metadata":{},"sourceType":"module"}