{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"F:\\\\React\\\\tree-react-mysql\\\\src\\\\pages\\\\TimeLine.js\",\n    _s = $RefreshSig$();\n\nimport { React, useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport getReqHeader from '../utils/getReqHeader';\nimport TimeLineHeader from '../Components/timeline/TimeLineHeader';\nimport TimeLineBody from '../Components/timeline/TimeLineBody';\n\nfunction TimeLine(props) {\n  _s();\n\n  // create state\n  const [data, setData] = useState(null);\n  const [isProg, setIsProg] = useState(false);\n  const [isDate, setIsDate] = useState(false);\n  const ex = {\n    setData,\n    branches: data,\n    isProg,\n    setIsProg,\n    isDate,\n    setIsDate\n  }; // extract date from the props\n\n  const {\n    fontSize,\n    p\n  } = props; // extract url data\n\n  const {\n    id\n  } = useParams();\n  const {\n    dir\n  } = useParams(); // get dataFrom the Database.\n\n  const url = p.apiBase + '/branch/timeline?id=' + id + '&dir=' + dir;\n  useEffect(() => {\n    setIsProg(true);\n    getReqHeader(url, {\n      token: props.p.token\n    }).then(d => {\n      setData(d);\n      setIsProg(false);\n      console.log(d);\n    });\n  }, []);\n\n  const getCls = baseName => {\n    return p.getCls('p2time-line-' + baseName);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: getCls('wrapper'),\n    children: [/*#__PURE__*/_jsxDEV(TimeLineHeader, {\n      p: p,\n      ex: ex\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }, this), !isProg && data && data.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: getCls('container'),\n      children: /*#__PURE__*/_jsxDEV(TimeLineBody, {\n        p: p,\n        ex: ex\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 17\n    }, this), !isProg && data && data.length <= 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: getCls('empty-container'),\n      children: \"there is no branches.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 17\n    }, this), isProg && /*#__PURE__*/_jsxDEV(\"i\", {\n      className: \"fas fa-spinner spinner\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 9\n  }, this);\n}\n\n_s(TimeLine, \"3+YF8MhWMRkFx1D6xeVO3w5qQFU=\", false, function () {\n  return [useParams, useParams];\n});\n\n_c = TimeLine;\nexport default TimeLine;\n\nvar _c;\n\n$RefreshReg$(_c, \"TimeLine\");","map":{"version":3,"sources":["F:/React/tree-react-mysql/src/pages/TimeLine.js"],"names":["React","useState","useEffect","useParams","getReqHeader","TimeLineHeader","TimeLineBody","TimeLine","props","data","setData","isProg","setIsProg","isDate","setIsDate","ex","branches","fontSize","p","id","dir","url","apiBase","token","then","d","console","log","getCls","baseName","length"],"mappings":";;;;;AAAA,SAASA,KAAT,EAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,SAAT,QAA0B,kBAA1B;AACA,OAAOC,YAAP,MAAyB,uBAAzB;AACA,OAAOC,cAAP,MAA2B,uCAA3B;AACA,OAAOC,YAAP,MAAyB,qCAAzB;;AAEA,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AAAA;;AACrB;AACA,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBT,QAAQ,CAAC,IAAD,CAAhC;AACA,QAAM,CAACU,MAAD,EAASC,SAAT,IAAsBX,QAAQ,CAAC,KAAD,CAApC;AACA,QAAM,CAACY,MAAD,EAASC,SAAT,IAAsBb,QAAQ,CAAC,KAAD,CAApC;AAEA,QAAMc,EAAE,GAAG;AACPL,IAAAA,OADO;AACEM,IAAAA,QAAQ,EAACP,IADX;AACiBE,IAAAA,MADjB;AACyBC,IAAAA,SADzB;AACoCC,IAAAA,MADpC;AAC4CC,IAAAA;AAD5C,GAAX,CANqB,CASrB;;AACA,QAAM;AAAEG,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,MAAkBV,KAAxB,CAVqB,CAWrB;;AACA,QAAM;AAAEW,IAAAA;AAAF,MAAShB,SAAS,EAAxB;AACA,QAAM;AAAEiB,IAAAA;AAAF,MAAUjB,SAAS,EAAzB,CAbqB,CAcrB;;AACA,QAAMkB,GAAG,GAAGH,CAAC,CAACI,OAAF,GAAY,sBAAZ,GAAqCH,EAArC,GAA0C,OAA1C,GAAoDC,GAAhE;AACAlB,EAAAA,SAAS,CAAC,MAAM;AACZU,IAAAA,SAAS,CAAC,IAAD,CAAT;AACAR,IAAAA,YAAY,CAACiB,GAAD,EAAM;AAAEE,MAAAA,KAAK,EAAEf,KAAK,CAACU,CAAN,CAAQK;AAAjB,KAAN,CAAZ,CACKC,IADL,CACWC,CAAD,IAAO;AACTf,MAAAA,OAAO,CAACe,CAAD,CAAP;AACAb,MAAAA,SAAS,CAAC,KAAD,CAAT;AACAc,MAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACH,KALL;AAOH,GATQ,EASN,EATM,CAAT;;AAcA,QAAMG,MAAM,GAAIC,QAAD,IAAc;AACzB,WAAOX,CAAC,CAACU,MAAF,CAAS,iBAAiBC,QAA1B,CAAP;AACH,GAFD;;AAGA,sBACI;AAAK,IAAA,SAAS,EAAED,MAAM,CAAC,SAAD,CAAtB;AAAA,4BACI,QAAC,cAAD;AAAgB,MAAA,CAAC,EAAEV,CAAnB;AAAsB,MAAA,EAAE,EAAEH;AAA1B;AAAA;AAAA;AAAA;AAAA,YADJ,EAGK,CAACJ,MAAD,IAAWF,IAAX,IAAmBA,IAAI,CAACqB,MAAL,GAAc,CAAjC,iBACG;AAAK,MAAA,SAAS,EAAEF,MAAM,CAAC,WAAD,CAAtB;AAAA,6BACI,QAAC,YAAD;AAAc,QAAA,CAAC,EAAEV,CAAjB;AAAoB,QAAA,EAAE,EAAEH;AAAxB;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YAJR,EASK,CAACJ,MAAD,IAAWF,IAAX,IAAmBA,IAAI,CAACqB,MAAL,IAAe,CAAlC,iBACG;AAAK,MAAA,SAAS,EAAEF,MAAM,CAAC,iBAAD,CAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAVR,EAcKjB,MAAM,iBACH;AAAG,MAAA,SAAS,EAAC;AAAb;AAAA;AAAA;AAAA;AAAA,YAfR;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAoBH;;GArDQJ,Q;UAYUJ,S,EACCA,S;;;KAbXI,Q;AAuDT,eAAeA,QAAf","sourcesContent":["import { React, useState, useEffect } from 'react'\nimport { useParams } from 'react-router-dom'\nimport getReqHeader from '../utils/getReqHeader'\nimport TimeLineHeader from '../Components/timeline/TimeLineHeader'\nimport TimeLineBody from '../Components/timeline/TimeLineBody'\n\nfunction TimeLine(props) {\n    // create state\n    const [data, setData] = useState(null)\n    const [isProg, setIsProg] = useState(false)\n    const [isDate, setIsDate] = useState(false)\n\n    const ex = {\n        setData, branches:data, isProg, setIsProg, isDate, setIsDate\n    }\n    // extract date from the props\n    const { fontSize, p } = props\n    // extract url data\n    const { id } = useParams()\n    const { dir } = useParams()\n    // get dataFrom the Database.\n    const url = p.apiBase + '/branch/timeline?id=' + id + '&dir=' + dir\n    useEffect(() => {\n        setIsProg(true)\n        getReqHeader(url, { token: props.p.token })\n            .then((d) => {\n                setData(d)\n                setIsProg(false)\n                console.log(d)\n            })\n        \n    }, [])\n\n\n\n\n    const getCls = (baseName) => {\n        return p.getCls('p2time-line-' + baseName)\n    }\n    return (\n        <div className={getCls('wrapper')}>\n            <TimeLineHeader p={p} ex={ex} />\n            {/* loaded successfully and there is data */}\n            {!isProg && data && data.length > 0 &&\n                <div className={getCls('container')}>\n                    <TimeLineBody p={p} ex={ex} />\n                </div>\n            }\n            {/* loaded successfully but not data founded */}\n            {!isProg && data && data.length <= 0 &&\n                <div className={getCls('empty-container')}>\n                    there is no branches.\n                </div>\n            }\n            {isProg &&\n                <i className=\"fas fa-spinner spinner\"></i>\n            }\n        </div>\n    )\n}\n\nexport default TimeLine\n"]},"metadata":{},"sourceType":"module"}