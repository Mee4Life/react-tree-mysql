{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"F:\\\\React\\\\tree-react-mysql\\\\src\\\\Components\\\\branches\\\\new\\\\persons\\\\List.js\",\n    _s = $RefreshSig$();\n\nimport { cleanup } from '@testing-library/react';\nimport React, { useState, useEffect } from 'react';\nimport { tokenGet, getSpinner } from '../../../../utils/functions';\nimport Item from './Item';\n\nfunction List(props) {\n  _s();\n\n  // extract the state \n  const {\n    p\n  } = props;\n  let {\n    ex\n  } = props;\n  const {\n    rPersons,\n    setRPersons\n  } = ex;\n\n  const getCls = base => {\n    return p.getCls('Pf5uzOkS-' + base);\n  }; // create state \n\n\n  const [loading, setLoading] = useState(false); // get branches\n\n  useEffect(() => {\n    const url = p.apiBase + '/person/search?q=' + ex.newGName;\n    tokenGet(url, {\n      token: p.token\n    }).then(d => {\n      console.log(d);\n      setRPersons(d);\n    });\n    return () => {\n      cleanup();\n    };\n  }, [ex.newGName]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: getCls('wrapper'),\n    children: [!loading && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: getCls('container'),\n      children: rPersons.map(person => /*#__PURE__*/_jsxDEV(Item, {\n        p: p,\n        ex: ex,\n        person: person\n      }, person._id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 25\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 17\n    }, this), loading && getSpinner()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 9\n  }, this);\n}\n\n_s(List, \"bp7W7BLZaxNmS0ceaCBH82+KoGQ=\");\n\n_c = List;\nexport default List;\n\nvar _c;\n\n$RefreshReg$(_c, \"List\");","map":{"version":3,"sources":["F:/React/tree-react-mysql/src/Components/branches/new/persons/List.js"],"names":["cleanup","React","useState","useEffect","tokenGet","getSpinner","Item","List","props","p","ex","rPersons","setRPersons","getCls","base","loading","setLoading","url","apiBase","newGName","token","then","d","console","log","map","person","_id"],"mappings":";;;;;AAAA,SAASA,OAAT,QAAwB,wBAAxB;AACA,OAAOC,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,QAAT,EAAmBC,UAAnB,QAAqC,6BAArC;AACA,OAAOC,IAAP,MAAiB,QAAjB;;AAGA,SAASC,IAAT,CAAcC,KAAd,EAAqB;AAAA;;AACjB;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAQD,KAAd;AACA,MAAI;AAAEE,IAAAA;AAAF,MAASF,KAAb;AACA,QAAM;AAACG,IAAAA,QAAD;AAAWC,IAAAA;AAAX,MAA0BF,EAAhC;;AACA,QAAMG,MAAM,GAAIC,IAAD,IAAU;AAAE,WAAOL,CAAC,CAACI,MAAF,CAAS,cAAcC,IAAvB,CAAP;AAAqC,GAAhE,CALiB,CAOjB;;;AACA,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBd,QAAQ,CAAC,KAAD,CAAtC,CARiB,CAUjB;;AACAC,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMc,GAAG,GAAGR,CAAC,CAACS,OAAF,GAAY,mBAAZ,GAAkCR,EAAE,CAACS,QAAjD;AACAf,IAAAA,QAAQ,CAACa,GAAD,EAAM;AAAEG,MAAAA,KAAK,EAAEX,CAAC,CAACW;AAAX,KAAN,CAAR,CACKC,IADL,CACWC,CAAD,IAAO;AACTC,MAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACAV,MAAAA,WAAW,CAACU,CAAD,CAAX;AACH,KAJL;AAKA,WAAO,MAAM;AACTtB,MAAAA,OAAO;AACV,KAFD;AAGH,GAVQ,EAUN,CAACU,EAAE,CAACS,QAAJ,CAVM,CAAT;AAaA,sBACI;AAAK,IAAA,SAAS,EAAEN,MAAM,CAAC,SAAD,CAAtB;AAAA,eACK,CAACE,OAAD,iBACG;AAAK,MAAA,SAAS,EAAEF,MAAM,CAAC,WAAD,CAAtB;AAAA,gBACKF,QAAQ,CAACc,GAAT,CAAcC,MAAD,iBACV,QAAC,IAAD;AAAM,QAAA,CAAC,EAAEjB,CAAT;AAAY,QAAA,EAAE,EAAEC,EAAhB;AAAoB,QAAA,MAAM,EAAEgB;AAA5B,SAAyCA,MAAM,CAACC,GAAhD;AAAA;AAAA;AAAA;AAAA,cADH;AADL;AAAA;AAAA;AAAA;AAAA,YAFR,EAQKZ,OAAO,IACJV,UAAU,EATlB;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAeH;;GAvCQE,I;;KAAAA,I;AA0CT,eAAeA,IAAf","sourcesContent":["import { cleanup } from '@testing-library/react'\nimport React, { useState, useEffect } from 'react'\nimport { tokenGet, getSpinner } from '../../../../utils/functions'\nimport Item from './Item'\n\n\nfunction List(props) {\n    // extract the state \n    const { p } = props\n    let { ex } = props\n    const {rPersons, setRPersons} = ex\n    const getCls = (base) => { return p.getCls('Pf5uzOkS-' + base) }\n\n    // create state \n    const [loading, setLoading] = useState(false)\n\n    // get branches\n    useEffect(() => {\n        const url = p.apiBase + '/person/search?q=' + ex.newGName\n        tokenGet(url, { token: p.token })\n            .then((d) => {\n                console.log(d)\n                setRPersons(d)\n            })\n        return () => {\n            cleanup()\n        }\n    }, [ex.newGName])\n\n\n    return (\n        <div className={getCls('wrapper')}>\n            {!loading &&\n                <div className={getCls('container')}>\n                    {rPersons.map((person) => (\n                        <Item p={p} ex={ex} person={person} key={person._id} />\n                    ))}\n                </div>\n            }\n            {loading && \n                getSpinner()\n            }\n        </div>\n\n    )\n}\n\n\nexport default List\n\n"]},"metadata":{},"sourceType":"module"}